!function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=3)}([function(t,e,s){var i=s(1),n=s(2);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[t.i,n,""]]);var a={insert:"head",singleton:!1},r=(i(n,a),n.locals?n.locals:{});t.exports=r},function(t,e,s){"use strict";var i,n=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},a=function(){var t={};return function(e){if(void 0===t[e]){var s=document.querySelector(e);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(t){s=null}t[e]=s}return t[e]}}(),r=[];function d(t){for(var e=-1,s=0;s<r.length;s++)if(r[s].identifier===t){e=s;break}return e}function o(t,e){for(var s={},i=[],n=0;n<t.length;n++){var a=t[n],o=e.base?a[0]+e.base:a[0],l=s[o]||0,c="".concat(o," ").concat(l);s[o]=l+1;var h=d(c),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==h?(r[h].references++,r[h].updater(u)):r.push({identifier:c,updater:y(u,e),references:1}),i.push(c)}return i}function l(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var n=s.nc;n&&(i.nonce=n)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var r=a(t.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}return e}var c,h=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function u(t,e,s,i){var n=s?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(t.styleSheet)t.styleSheet.cssText=h(e,n);else{var a=document.createTextNode(n),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(a,r[e]):t.appendChild(a)}}function f(t,e,s){var i=s.css,n=s.media,a=s.sourceMap;if(n?t.setAttribute("media",n):t.removeAttribute("media"),a&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var g=null,m=0;function y(t,e){var s,i,n;if(e.singleton){var a=m++;s=g||(g=l(e)),i=u.bind(null,s,a,!1),n=u.bind(null,s,a,!0)}else s=l(e),i=f.bind(null,s,e),n=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(s)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else n()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=n());var s=o(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var i=0;i<s.length;i++){var n=d(s[i]);r[n].references--}for(var a=o(t,e),l=0;l<s.length;l++){var c=d(s[l]);0===r[c].references&&(r[c].updater(),r.splice(c,1))}s=a}}}},function(t,e,s){},function(t,e,s){"use strict";s.r(e);s(0);const i=(t,e,s,i)=>{const n=document.createElement("td");n.id=`${s}-${i}`,n.classList.add("unvisited"),n.style.width=e+"px",n.style.height=e+"px",n.dataset.x=s,n.dataset.y=i,t.appendChild(n)},n=(t,e)=>Math.floor(Math.random()*e)+t,a=(t,e,s)=>{let i;do{i=n(t,e)}while(i===s);return i};var r=class{constructor(t,e,s,i,n,a){this.status=t,this.id=`${e}-${s}`,this.x=e,this.y=s,this.dist=i,this.prevId=n,this.direction=a,this.heuristicDistance=null,this.update=this.update.bind(this)}update(t){for(let e of Object.keys(this))for(let s of Object.keys(t))e===s&&(this[e]=t[s])}};const d={north:0,east:1,south:2,west:3},o=["north","east","south","west"],l=t=>o[t],c=[0,1,2,1],h=[1,0,1,2],u=[2,1,0,1],f=[1,2,1,0],g=(t,e)=>{if(t.y<e.y&&t.x===e.x)return c[t.direction]+1;if(t.x<e.x&&t.y===e.y)return h[t.direction]+1;if(t.y>e.y&&t.x===e.x)return u[t.direction]+1;if(t.x>e.x&&t.y===e.y)return f[t.direction]+1;throw new Error("Something went wrong when setting the distance between nodes.")},m=(t,e)=>{if(t.y<e.y&&t.x===e.x)return d.north;if(t.x<e.x&&t.y===e.y)return d.east;if(t.y>e.y&&t.x===e.x)return d.south;if(t.x>e.x&&t.y===e.y)return d.west;throw new Error("Something went wrong when setting the direction of node.")},y=(t,e)=>{const s=Math.abs(t.x-e.x),i=Math.abs(t.y-e.y);let n=0;const a=0===(r=t.direction)?c:1===r?h:2===r?u:3===r?f:void 0;var r;return t.y<e.y?(n+=a[0],t.x<e.x?n+=a[1]:t.x>e.x&&(n+=a[3])):t.y>e.y&&(n+=a[2],t.x<e.x?n+=a[1]:t.x>e.x&&(n+=a[3])),s+i+n};const p=(t,e,s,i)=>{let n=[];return e[`${s}-${i+1}`]&&!document.getElementById(`${s}-${i+1}`).classList.contains("wall")&&n.push(`${s}-${i+1}`),e[`${s+1}-${i}`]&&!document.getElementById(`${s+1}-${i}`).classList.contains("wall")&&n.push(`${s+1}-${i}`),e[`${s}-${i-1}`]&&!document.getElementById(`${s}-${i-1}`).classList.contains("wall")&&n.push(`${s}-${i-1}`),e[`${s-1}-${i}`]&&!document.getElementById(`${s-1}-${i}`).classList.contains("wall")&&n.push(`${s-1}-${i}`),n.filter(e=>t.find(t=>e===t))},v=(t,e)=>{let s=1/0,i=0,n=0;return t.forEach((t,a)=>{e[t]&&e[t].dist<s&&(s=e[t].dist,i=t,n=a)}),t.splice(n,1),e[i]},b=(t,e)=>{let s=1/0,i=0,n=0;return t.forEach((t,a)=>{if(e[t]&&e[t].dist!==1/0){const r=e[t].dist+e[t].heuristicDistance;r<s&&(s=r,i=t,n=a)}}),t.splice(n,1),e[i]},w=(t,e)=>t.x===e.x&&t.y===e.y;var E=t=>new Promise(e=>setTimeout(e,t));const x=async(t,e)=>{document.getElementById(t).classList.remove("unvisited"),document.getElementById(t).classList.remove("neighbor"),document.getElementById(t).classList.add("visited"),await E(e/5)},N=async(t,e)=>{document.getElementById(t).classList.add("neighbor"),await E(e/5)},I=async(t,e,s,i)=>{let n=[],a=!1,r=t[`${s.x}-${s.y}`];for(n.push(r.id);!a;){if(r.x===e.x&&r.y===e.y){a=!0;break}n.push(r.prevId),r=t[r.prevId]}for(let t=n.length-1;t>=0;t--)document.getElementById(n[t]).classList.add("path"),await E(i)},S=async(t,e)=>{const s=t.length;for(let i=0;i<s;i++)await e(t[i],i,t)};new class{constructor(t,e,s){this.boardId=t,this.blockSize=e,this.width=null,this.height=null,this.nodes={},this.startNode=null,this.startInitialDirection="north",this.endNode=null,this.isMakingWalls=!1,this.isNodeDragged=!1,this.draggedNodeClassList=null,this.algorithms=s,this.currentAlgorithm=null,this.speed=40,this.isSearching=!1,this.isPrepared=!1}initialize(){this.createNav(),this.calculateBoardSize(),this.createBoard(),this.setStartNode(),this.setEndNode(),this.setCurrentAlgorithm("dijkstra"),this.addNavAlgoElemsEventListeners(),this.addBlocksEventListeners(),this.addBtnsEventListeners(),console.log(this),this.isPrepared=!0}calculateBoardSize(){const t=document.getElementById(this.boardId),e=t.clientWidth,s=t.clientHeight;this.width=Math.floor(e/this.blockSize),this.height=Math.floor(s/this.blockSize)}createBoard(){const t=document.getElementById(this.boardId),e=document.createElement("tbody");for(let t=this.height-1;t>=0;t--){const s=document.createElement("tr");for(let e=0;e<this.width;e++){i(s,this.blockSize,e,t);const n=new r("block",e,t,1/0,null,null);this.nodes[n.id]=n}e.appendChild(s)}t.appendChild(e)}createNav(){const t=document.getElementById("nav");for(let[e,s]of Object.entries(this.algorithms)){const i=document.createElement("div");i.classList.add("nav-algorithm-js"),i.innerText=s.name,i.dataset.algorithmKey=e,t.appendChild(i)}}setCurrentAlgorithm(t){this.currentAlgorithm=this.algorithms[t].func,document.querySelectorAll(".nav-algorithm-js")[0].classList.add("active")}setStartNode(){const t=`${n(0,this.width-1)}-${n(0,this.height-1)}`;this.setNodeAsStart(t),document.getElementById(this.startNode.id).classList.add("start",this.startInitialDirection)}setEndNode(){const t=`${a(0,this.width-1,this.startNode.x)}-${a(0,this.height-1,this.startNode.y)}`;this.setNodeAsEnd(t),document.getElementById(this.endNode.id).classList.add("end")}addNavAlgoElemsEventListeners(){const t=document.querySelectorAll(".nav-algorithm-js");t.forEach(e=>{e.addEventListener("click",e=>{e.target.classList.contains("blocked")||(t.forEach(t=>t.classList.remove("active")),e.target.classList.add("active"),this.currentAlgorithm=this.algorithms[e.target.dataset.algorithmKey].func)})})}addBtnsEventListeners(){const t=document.getElementById("startBtn"),e=document.getElementById("clearBtn");t.addEventListener("click",async t=>{this.isPrepared&&(this.handleIsSearchingState(!0),this.handleIsPreparedState(!1),await this.currentAlgorithm(this.nodes,this.startNode,this.endNode,this.speed),this.handleIsSearchingState(!1))}),e.addEventListener("click",t=>{this.isSearching||(this.clearBoard(),this.handleIsPreparedState(!0))})}addBlocksEventListeners(){document.querySelectorAll(".unvisited").forEach(t=>{t.addEventListener("mousedown",e=>{e.preventDefault(),this.handleMouseDown(t)}),t.addEventListener("mouseenter",e=>{e.preventDefault(),this.handleMouseEnter(t)}),t.addEventListener("mouseup",e=>{e.preventDefault(),this.handleMouseUp(t)}),t.addEventListener("mouseleave",e=>{e.preventDefault(),this.handleMouseLeave(t)})})}handleMouseDown(t){const e=t.id;this.isNodeBlock(e)?this.isNodeDragged||(this.createWall(t),this.setMakingWallsState(!0)):(this.draggedNodeId=e,this.isNodeDragged=!0)}handleMouseEnter(t){if(this.isNodeDragged&&!this.isBlockWall(t)){const e=this.nodes[this.draggedNodeId];if("start"!==e.status||t.classList.contains("end"))"end"!==e.status||t.classList.contains("start")||t.classList.add("end");else{const s=l(e.direction);t.classList.add("start",s)}}else this.isMakingWalls&&this.isNodeBlock(t.id)&&this.createWall(t)}handleMouseUp(t){const e=t.id;this.isNodeDragged&&e!==this.draggedNodeId&&!this.isBlockWall(t)?("start"===this.nodes[this.draggedNodeId].status?this.setNodeAsStart(e):"end"===this.nodes[this.draggedNodeId].status&&this.setNodeAsEnd(e),this.setNodeAsBlock(this.draggedNodeId),this.isNodeDragged=!1,this.draggedNodeId=null):this.setMakingWallsState(!1)}handleMouseLeave(t){if(this.isNodeDragged){const e=this.nodes[this.draggedNodeId];if("start"===e.status){const s=l(e.direction);t.classList.remove("start",s)}else"end"===e.status&&t.classList.remove("end")}}isNodeBlock(t){return!("start"===this.nodes[t].status||"end"===this.nodes[t].status)}createWall(t){window.requestAnimationFrame(()=>t.classList.add("wall"))}isBlockWall(t){return t.classList.contains("wall")}setMakingWallsState(t){this.isMakingWalls=t}handleIsSearchingState(t){this.isSearching=t,document.getElementById("clearBtn").disabled=t}handleIsPreparedState(t){this.isPrepared=t,document.getElementById("startBtn").disabled=!t}clearBoard(){for(let t=this.height-1;t>=0;t--)for(let e=0;e<this.width;e++)this.nodes[`${e}-${t}`].update({status:"block",dist:1/0,prevId:null,direction:null}),document.getElementById(`${e}-${t}`).classList=[],document.getElementById(`${e}-${t}`).classList.add("unvisited");this.setStartNode(),this.setEndNode()}setNodeAsStart(t){this.nodes[t].update({status:"start",dist:0,direction:d[this.startInitialDirection]}),this.startNode=this.nodes[t]}setNodeAsEnd(t){this.nodes[t].update({status:"end",dist:1/0,direction:null}),this.endNode=this.nodes[t]}setNodeAsBlock(t){this.nodes[t].update({status:"block",dist:1/0,direction:null})}}("board",25,{dijkstra:{name:"Dijkstra",func:async(t,e,s,i)=>{let n=Object.keys(t),a={},r=!1;for(;n.length;){const e=v(n,t);if(!e)break;if(await x(e.id,i),a[e.id]=e,w(e,s)){r=!0;break}p(n,t,e.x,e.y).forEach(s=>{const i=g(e,t[s]);e.dist+i<t[s].dist&&(N(s),t[s].dist=e.dist+i,t[s].prevId=e.id,t[s].direction=m(e,t[s]))})}r&&I(a,e,s,i)}},bfs:{name:"Breadth-First Search",func:async(t,e,s,i)=>{let n=Object.keys(t),a={},r=!1;for(;n.length;){const e=v(n,t);if(!e)break;if(await x(e.id,i),a[e.id]=e,w(e,s)){r=!0;break}const d=p(n,t,e.x,e.y);await S(d,s=>{e.dist<t[s].dist&&(N(s,i),t[s].dist=e.dist+1,t[s].prevId=e.id)})}r&&I(a,e,s,i)}},dfs:{name:"Depth-First Search",func:async(t,e,s,i)=>{let n=Object.keys(t),a={},r=!1;const d=async(e,i)=>{if(!e)return;if(r)return;if(await x(e.id),e.prevId=i,a[e.id]=e,n=n.filter(t=>t!==e.id),w(e,s))return void(r=!0);const o=p(n,t,e.x,e.y);await S(o,s=>d(t[s],e.id))};await d(t[`${e.x}-${e.y}`]),r&&I(a,e,s,i)}},astar:{name:"A* Search",func:async(t,e,s,i)=>{let n=Object.keys(t),a={},r=!1;for(t[e.id].heuristicDistance=y(e,s);n.length;){const e=b(n,t);if(!e)break;if(await x(e.id,i),a[e.id]=e,w(e,s)){r=!0;break}const d=p(n,t,e.x,e.y);await S(d,async n=>{const a=g(e,t[n]);e.dist+a<t[n].dist&&(await N(n,i),t[n].dist=e.dist+a,t[n].direction=m(e,t[n]),t[n].heuristicDistance=y(t[n],s),t[n].prevId=e.id)})}r&&I(a,e,s,i)}}}).initialize()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,