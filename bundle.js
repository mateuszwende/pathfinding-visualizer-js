!function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=3)}([function(t,e,s){var i=s(1),n=s(2);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[t.i,n,""]]);var d={insert:"head",singleton:!1},a=(i(n,d),n.locals?n.locals:{});t.exports=a},function(t,e,s){"use strict";var i,n=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},d=function(){var t={};return function(e){if(void 0===t[e]){var s=document.querySelector(e);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(t){s=null}t[e]=s}return t[e]}}(),a=[];function r(t){for(var e=-1,s=0;s<a.length;s++)if(a[s].identifier===t){e=s;break}return e}function o(t,e){for(var s={},i=[],n=0;n<t.length;n++){var d=t[n],o=e.base?d[0]+e.base:d[0],l=s[o]||0,c="".concat(o," ").concat(l);s[o]=l+1;var h=r(c),u={css:d[1],media:d[2],sourceMap:d[3]};-1!==h?(a[h].references++,a[h].updater(u)):a.push({identifier:c,updater:p(u,e),references:1}),i.push(c)}return i}function l(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var n=s.nc;n&&(i.nonce=n)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var a=d(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var c,h=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function u(t,e,s,i){var n=s?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(t.styleSheet)t.styleSheet.cssText=h(e,n);else{var d=document.createTextNode(n),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(d,a[e]):t.appendChild(d)}}function f(t,e,s){var i=s.css,n=s.media,d=s.sourceMap;if(n?t.setAttribute("media",n):t.removeAttribute("media"),d&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(d))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var g=null,m=0;function p(t,e){var s,i,n;if(e.singleton){var d=m++;s=g||(g=l(e)),i=u.bind(null,s,d,!1),n=u.bind(null,s,d,!0)}else s=l(e),i=f.bind(null,s,e),n=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(s)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else n()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=n());var s=o(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var i=0;i<s.length;i++){var n=r(s[i]);a[n].references--}for(var d=o(t,e),l=0;l<s.length;l++){var c=r(s[l]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}s=d}}}},function(t,e,s){},function(t,e,s){"use strict";s.r(e);s(0);const i=(t,e,s,i)=>{const n=document.createElement("td");n.id=`${s}-${i}`,n.classList.add("unvisited"),n.style.width=e+"px",n.style.height=e+"px",n.dataset.x=s,n.dataset.y=i,t.appendChild(n)},n=(t,e)=>Math.floor(Math.random()*e)+t;var d=t=>new Promise(e=>setTimeout(e,t));const a=0,r=1,o=2,l=3,c=["north","east","south","west"],h=t=>c[t],u=[0,1,2,1],f=[1,0,1,2],g=[2,1,0,1],m=[1,2,1,0],p=(t,e)=>{if(t.y<e.y&&t.x===e.x)return u[t.direction]+1;if(t.x<e.x&&t.y===e.y)return f[t.direction]+1;if(t.y>e.y&&t.x===e.x)return g[t.direction]+1;if(t.x>e.x&&t.y===e.y)return m[t.direction]+1;throw new Error("Something went wrong when setting the distance between nodes.")},y=(t,e)=>{if(t.y<e.y&&t.x===e.x)return a;if(t.x<e.x&&t.y===e.y)return r;if(t.y>e.y&&t.x===e.x)return o;if(t.x>e.x&&t.y===e.y)return l;throw new Error("Something went wrong when setting the direction of node.")},v=(t,e,s,i)=>{let n=[];return e[`${s}-${i+1}`]&&!document.getElementById(`${s}-${i+1}`).classList.contains("wall")&&n.push(`${s}-${i+1}`),e[`${s+1}-${i}`]&&!document.getElementById(`${s+1}-${i}`).classList.contains("wall")&&n.push(`${s+1}-${i}`),e[`${s}-${i-1}`]&&!document.getElementById(`${s}-${i-1}`).classList.contains("wall")&&n.push(`${s}-${i-1}`),e[`${s-1}-${i}`]&&!document.getElementById(`${s-1}-${i}`).classList.contains("wall")&&n.push(`${s-1}-${i}`),n.filter(e=>t.find(t=>e===t))},b=async(t,e,s,i)=>{let n=[],a=!1,r=t[`${s.x}-${s.y}`];for(n.push(r.id);!a;){if(r.x===e.x&&r.y===e.y){a=!0;break}n.push(r.prevId),r=t[r.prevId]}for(let t=n.length-1;t>=0;t--)document.getElementById(n[t]).classList.add("path"),await d(i+100)},E=(t,e)=>{let s=1/0,i=0,n=0;return t.forEach((t,d)=>{e[t]&&e[t].dist<s&&(s=e[t].dist,i=t,n=d)}),t.splice(n,1),e[i]},w=(t,e,s)=>{let i;do{i=n(t,e)}while(i===s);return i};var I=class{constructor(t,e,s,i,n,d){this.status=t,this.id=`${e}-${s}`,this.x=e,this.y=s,this.dist=i,this.prevId=n,this.direction=d,this.update=this.update.bind(this)}update(t){for(let e of Object.keys(this))for(let s of Object.keys(t))e===s&&(this[e]=t[s])}};new class{constructor(t,e,s){this.boardId=t,this.blockSize=e,this.width=null,this.height=null,this.nodes={},this.startNode=null,this.endNode=null,this.isMakingWalls=!1,this.isNodeDragged=!1,this.draggedNodeClassList=null,this.algorithms=s,this.currentAlgorithm=null,this.speed=40,this.isSearching=!1,this.isPrepared=!1}initialize(){this.createNav(),this.calculateBoardSize(),this.createBoard(),this.setStartNode(),this.setEndNode(),this.setCurrentAlgorithm("dijkstra"),this.addNavAlgoElemsEventListeners(),this.addBlocksEventListeners(),this.addBtnsEventListeners(),console.log(this),this.isPrepared=!0}calculateBoardSize(){const t=document.getElementById(this.boardId),e=t.clientWidth,s=t.clientHeight;this.width=Math.floor(e/this.blockSize),this.height=Math.floor(s/this.blockSize)}createBoard(){const t=document.getElementById(this.boardId),e=document.createElement("tbody");for(let t=this.height-1;t>=0;t--){const s=document.createElement("tr");for(let e=0;e<this.width;e++){i(s,this.blockSize,e,t);const n=new I("block",e,t,1/0,null,null);this.nodes[n.id]=n}e.appendChild(s)}t.appendChild(e)}createNav(){const t=document.getElementById("nav");for(let[e,s]of Object.entries(this.algorithms)){const i=document.createElement("div");i.classList.add("nav-algorithm-js"),i.innerText=s.name,i.dataset.algorithmKey=e,t.appendChild(i)}}setCurrentAlgorithm(t){this.currentAlgorithm=this.algorithms[t].func,document.querySelectorAll(".nav-algorithm-js")[0].classList.add("active")}setStartNode(){const t=n(0,this.width-1),e=n(0,this.height-1);this.nodes[`${t}-${e}`].update({status:"start",dist:0,direction:r}),this.startNode=this.nodes[`${t}-${e}`],document.getElementById(this.startNode.id).classList.add("start","east")}setEndNode(){const t=w(0,this.width-1,this.startNode.x),e=w(0,this.height-1,this.startNode.y);this.nodes[`${t}-${e}`].status="end",this.nodes[`${t}-${e}`].update({status:"end"}),this.endNode=this.nodes[`${t}-${e}`],document.getElementById(this.endNode.id).classList.add("end")}addNavAlgoElemsEventListeners(){const t=document.querySelectorAll(".nav-algorithm-js");t.forEach(e=>{e.addEventListener("click",e=>{e.target.classList.contains("blocked")||(t.forEach(t=>t.classList.remove("active")),e.target.classList.add("active"),this.currentAlgorithm=this.algorithms[e.target.dataset.algorithmKey].func)})})}addBtnsEventListeners(){const t=document.getElementById("startBtn"),e=document.getElementById("clearBtn");t.addEventListener("click",async t=>{this.isPrepared&&(this.handleIsSearchingState(!0),this.handleIsPreparedState(!1),await this.currentAlgorithm(this.nodes,this.startNode,this.endNode,this.speed),this.handleIsSearchingState(!1))}),e.addEventListener("click",t=>{this.isSearching||(this.clearBoard(),this.handleIsPreparedState(!0))})}addBlocksEventListeners(){document.querySelectorAll(".unvisited").forEach(t=>{t.addEventListener("mousedown",e=>{e.preventDefault(),this.handleMouseDown(t)}),t.addEventListener("mouseenter",e=>{e.preventDefault(),this.handleMouseEnter(t)}),t.addEventListener("mouseup",e=>{e.preventDefault(),this.handleMouseUp(t)}),t.addEventListener("mouseleave",e=>{e.preventDefault(),this.handleMouseLeave(t)})})}handleMouseDown(t){const e=t.id;this.isNodeBlock(e)?this.isNodeDragged||(this.createWall(t),this.setMakingWallsState(!0)):(this.draggedNodeId=e,this.isNodeDragged=!0)}handleMouseEnter(t){if(this.isNodeDragged&&!this.isBlockWall(t)){const e=this.nodes[this.draggedNodeId];if("start"!==e.status||t.classList.contains("end"))"end"!==e.status||t.classList.contains("start")||t.classList.add("end");else{const s=h(e.direction);t.classList.add("start",s)}}else this.isMakingWalls&&this.isNodeBlock(t.id)&&this.createWall(t)}handleMouseUp(t){const e=t.id;this.isNodeDragged&&e!==this.draggedNodeId&&!this.isBlockWall(t)?("start"===this.nodes[this.draggedNodeId].status?(this.nodes[e].update({status:"start",dist:0,direction:r}),this.startNode=this.nodes[e]):"end"===this.nodes[this.draggedNodeId].status&&(this.nodes[e].update({status:"end",dist:1/0,direction:null}),this.endNode=this.nodes[e]),this.nodes[this.draggedNodeId].update({status:"block",dist:1/0,direction:null}),this.isNodeDragged=!1,this.draggedNodeId=null):this.setMakingWallsState(!1)}handleMouseLeave(t){if(this.isNodeDragged){const e=this.nodes[this.draggedNodeId];if("start"===e.status){const s=h(e.direction);t.classList.remove("start",s)}else"end"===e.status&&t.classList.remove("end")}}isNodeBlock(t){return!("start"===this.nodes[t].status||"end"===this.nodes[t].status)}createWall(t){window.requestAnimationFrame(()=>t.classList.add("wall"))}isBlockWall(t){return t.classList.contains("wall")}setMakingWallsState(t){this.isMakingWalls=t}handleIsSearchingState(t){this.isSearching=t,document.getElementById("clearBtn").disabled=t}handleIsPreparedState(t){this.isPrepared=t,document.getElementById("startBtn").disabled=!t}clearBoard(){for(let t=this.height-1;t>=0;t--)for(let e=0;e<this.width;e++)this.nodes[`${e}-${t}`].update({status:"block",dist:1/0,prevId:null,direction:null}),document.getElementById(`${e}-${t}`).classList=[],document.getElementById(`${e}-${t}`).classList.add("unvisited");this.setStartNode(),this.setEndNode()}}("board",25,{dijkstra:{name:"Dijkstra",func:async(t,e,s,i)=>{let n=Object.keys(t),a={},r=!1;for(;n.length;){const e=E(n,t);if(document.getElementById(e.id).classList.add("visited"),await d(i),!e)break;if(a[e.id]=e,l=s,(o=e).x===l.x&&o.y===l.y){r=!0;break}v(n,t,e.x,e.y).forEach(s=>{const i=p(e,t[s]);document.getElementById(t[s].id).classList.remove("neighbor"),document.getElementById(t[s].id).classList.add("neighbor"),e.dist+i<t[s].dist&&(t[s].dist=e.dist+i,t[s].prevId=e.id,t[s].direction=y(e,t[s]))})}var o,l;r&&b(a,e,s,i)}},bfs:{name:"Breadth-First Search",func:async(t,e,s,i)=>{let n=Object.keys(t),a={},r=!1;for(;n.length;){const e=E(n,t);if(document.getElementById(e.id).classList.add("visited"),await d(i),!e)break;if(a[e.id]=e,l=s,(o=e).x===l.x&&o.y===l.y){r=!0;break}v(n,t,e.x,e.y).forEach(s=>{e.dist<t[s].dist&&(t[s].dist=e.dist+1,t[s].prevId=e.id),document.getElementById(t[s].id).classList.replace("unvisited","neighbor")})}var o,l;r&&b(a,e,s,i)}},dfs:{name:"Depth-First Search",func:async(t,e,s,i)=>{let n=Object.keys(t),a={},r=!1;const o=async(e,l)=>{if(r)return;if(document.getElementById(e.id).classList.add("visited"),await d(i),!e)return;if(e.prevId=l,a[e.id]=e,n=n.filter(t=>t!==e.id),h=s,(c=e).x===h.x&&c.y===h.y)return void(r=!0);var c,h;const u=v(n,t,e.x,e.y);for(let s=0;s<u.length;s++)await o(t[u[s]],e.id)};await o(t[`${e.x}-${e.y}`]),console.log(a),r&&b(a,e,s,i)}}}).initialize()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zYXNzL21haW4uc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvaGVscGVycy9ibG9jay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9oZWxwZXJzL2dldFJhbmRvbU51bS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9oZWxwZXJzL2FzeW5jRGVsYXkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvYWxnb3JpdGhtcy9oZWxwZXJzL3dlaWdodGVkLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2FsZ29yaXRobXMvaGVscGVycy9uZWlnaGJvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvaGVscGVycy92aXN1YWxpemVQYXRoLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2FsZ29yaXRobXMvaGVscGVycy9ub2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9oZWxwZXJzL2dldERpZmZlcmVudFJhbmRvbU51bS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9Ob2RlLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9Cb2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9hbGdvcml0aG1zL2RpamtzdHJhLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2FsZ29yaXRobXMvYnJlYWR0aEZpcnN0LmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2FsZ29yaXRobXMvZGVwdGhGaXJzdC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImFwaSIsImNvbnRlbnQiLCJkZWZhdWx0Iiwib3B0aW9ucyIsImV4cG9ydGVkIiwibG9jYWxzIiwibWVtbyIsImlzT2xkSUUiLCJCb29sZWFuIiwid2luZG93IiwiZG9jdW1lbnQiLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibGVuZ3RoIiwibW9kdWxlc1RvRG9tIiwibGlzdCIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsIml0ZW0iLCJpZCIsImJhc2UiLCJjb3VudCIsImNvbmNhdCIsImluZGV4Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsInB1c2giLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsImtleXMiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJqb2luIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsInRvU3RyaW5nIiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJzcGxpY2UiLCJjcmVhdGVCbG9jayIsInBhcmVudCIsImJsb2NrU2l6ZSIsIngiLCJ5IiwiYmxvY2siLCJjbGFzc0xpc3QiLCJhZGQiLCJ3aWR0aCIsImhlaWdodCIsImRhdGFzZXQiLCJnZXRSYW5kb21OdW0iLCJtaW4iLCJtYXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJtcyIsImRpcmVjdGlvbnMiLCJkaXJlY3Rpb25zTmFtZSIsImdldERpcmVjdGlvbk5hbWUiLCJub3J0aERpcmVjdGlvbldlaWdodHMiLCJlYXN0RGlyZWN0aW9uV2VpZ2h0cyIsInNvdXRoRGlyZWN0aW9uV2VpZ2h0cyIsIndlc3REaXJlY3Rpb25XZWlnaHRzIiwiZ2V0RGlzdGFuY2VCZXR3ZWVuTm9kZXMiLCJub2RlXzEiLCJub2RlXzIiLCJkaXJlY3Rpb24iLCJnZXROb2RlRGlyZWN0aW9uIiwiZ2V0TmVpZ2hib3JzSWRzIiwidW52aXNpdGVkTm9kZXNJZHMiLCJub2RlcyIsImFyciIsImdldEVsZW1lbnRCeUlkIiwiY29udGFpbnMiLCJwb3RlbnRpYWxOZWlnaGJvcklkIiwiZmluZCIsIm5vZGVJZCIsInZpc3VhbGl6ZVBhdGgiLCJhc3luYyIsInZpc2l0ZWROb2RlcyIsInN0YXJ0IiwiZW5kIiwic3BlZWQiLCJwYXRoSWRzIiwiZm91bmRTdGFydCIsImN1cnJOb2RlIiwicHJldklkIiwiYXN5bmNEZWxheSIsImdldENsb3Nlc3ROb2RlIiwidW52aXNpdGVkSWRzIiwiSW5maW5pdHkiLCJtaW5EaXN0Tm9kZUlkIiwiZGlzdCIsImdldERpZmZlcmVudFJhbmRvbU51bSIsImRpZmZlcmVudEZyb20iLCJyYW5kIiwic3RhdHVzIiwidGhpcyIsInZhbHVlcyIsImZpZWxkS2V5IiwidmFsS2V5IiwiYm9hcmRJZCIsImFsZ29yaXRobXMiLCJzdGFydE5vZGUiLCJlbmROb2RlIiwiaXNNYWtpbmdXYWxscyIsImlzTm9kZURyYWdnZWQiLCJkcmFnZ2VkTm9kZUNsYXNzTGlzdCIsImN1cnJlbnRBbGdvcml0aG0iLCJpc1NlYXJjaGluZyIsImlzUHJlcGFyZWQiLCJjcmVhdGVOYXYiLCJjYWxjdWxhdGVCb2FyZFNpemUiLCJjcmVhdGVCb2FyZCIsInNldFN0YXJ0Tm9kZSIsInNldEVuZE5vZGUiLCJzZXRDdXJyZW50QWxnb3JpdGhtIiwiYWRkTmF2QWxnb0VsZW1zRXZlbnRMaXN0ZW5lcnMiLCJhZGRCbG9ja3NFdmVudExpc3RlbmVycyIsImFkZEJ0bnNFdmVudExpc3RlbmVycyIsImNvbnNvbGUiLCJsb2ciLCJib2FyZCIsInB4V2lkdGgiLCJjbGllbnRXaWR0aCIsInB4SGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwidGJvZHkiLCJyb3ciLCJuZXdOb2RlIiwibmF2IiwiYWxnbyIsImVudHJpZXMiLCJlbGVtIiwiaW5uZXJUZXh0IiwiYWxnb3JpdGhtS2V5IiwiZnVuYyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyYW5kWCIsInJhbmRZIiwiZWxlbXMiLCJhZGRFdmVudExpc3RlbmVyIiwic3RhcnRCdG4iLCJjbGVhckJ0biIsImhhbmRsZUlzU2VhcmNoaW5nU3RhdGUiLCJoYW5kbGVJc1ByZXBhcmVkU3RhdGUiLCJjbGVhckJvYXJkIiwicHJldmVudERlZmF1bHQiLCJoYW5kbGVNb3VzZURvd24iLCJoYW5kbGVNb3VzZUVudGVyIiwiaGFuZGxlTW91c2VVcCIsImhhbmRsZU1vdXNlTGVhdmUiLCJpc05vZGVCbG9jayIsImNyZWF0ZVdhbGwiLCJzZXRNYWtpbmdXYWxsc1N0YXRlIiwiZHJhZ2dlZE5vZGVJZCIsImlzQmxvY2tXYWxsIiwiZHJhZ2dlZE5vZGUiLCJkaXJlY3Rpb25OYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYm9vbCIsImRpc2FibGVkIiwiZGlqa3N0cmEiLCJmb3VuZEVuZCIsIm4yIiwibjEiLCJuZWlnaGJvcklkIiwiZGlzdGFuY2VCZXR3ZWVuTm9kZXMiLCJiZnMiLCJyZXBsYWNlIiwiZGZzIiwic2VhcmNoIiwibmVpZ2hib3JzIiwiaW5pdGlhbGl6ZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFB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ckcsRUFBTXNHLEVBQVVwUSxJQUFLNkssRUFBUzlHLFdBSXpDb00sRUFBT3JHLEVBQU0sR0FBR1UsRUFBTTFDLEtBQUswQyxFQUFNekMsTUFpQ3ZDaUYsUUFBUUMsSUFBSTFDLEdBQ1JvRixHQUNGdEYsRUFBY0UsRUFBY0MsRUFBT0MsRUFBS0MsT0o1RHRDMkYiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDMpO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtNCEuL21haW4uc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxudmFyIGV4cG9ydGVkID0gY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHt9O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIGJ0b2EpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJleHBvcnQgY29uc3QgY3JlYXRlQmxvY2sgPSAocGFyZW50LCBibG9ja1NpemUsIHgsIHkpID0+IHtcbiAgY29uc3QgYmxvY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG5cbiAgYmxvY2suaWQgPSBgJHt4fS0ke3l9YDtcbiAgYmxvY2suY2xhc3NMaXN0LmFkZChcInVudmlzaXRlZFwiKTtcbiAgYmxvY2suc3R5bGUud2lkdGggPSBgJHtibG9ja1NpemV9cHhgO1xuICBibG9jay5zdHlsZS5oZWlnaHQgPSBgJHtibG9ja1NpemV9cHhgO1xuXG4gIGJsb2NrLmRhdGFzZXQueCA9IHg7XG4gIGJsb2NrLmRhdGFzZXQueSA9IHk7XG5cbiAgcGFyZW50LmFwcGVuZENoaWxkKGJsb2NrKTtcbn07XG4iLCJleHBvcnQgY29uc3QgZ2V0UmFuZG9tTnVtID0gKG1pbiwgbWF4KSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXgpICsgbWluO1xuIiwiZXhwb3J0IGRlZmF1bHQgKG1zKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufTtcbiIsIi8qKlxuICogUG9zc2libGUgZGlyZWN0aW9ucyBvZiBub2RlXG4gKi9cbmV4cG9ydCBjb25zdCBkaXJlY3Rpb25zID0ge1xuICBub3J0aDogMCxcbiAgZWFzdDogMSxcbiAgc291dGg6IDIsXG4gIHdlc3Q6IDMsXG59O1xuXG5jb25zdCBkaXJlY3Rpb25zTmFtZSA9IFtcIm5vcnRoXCIsIFwiZWFzdFwiLCBcInNvdXRoXCIsIFwid2VzdFwiXTtcblxuLyoqXG4gKiBHZXQgZGlyZWN0aW9uIG5hbWUgYnkgcHJvdmlkZWQgaW5kZXhcbiAqL1xuZXhwb3J0IGNvbnN0IGdldERpcmVjdGlvbk5hbWUgPSAoaW5kZXgpID0+IGRpcmVjdGlvbnNOYW1lW2luZGV4XTtcblxuLyoqXG4gKiBOb2RlIGNhbiBiZSBkaXJlY3RlZCBpbnRvIDQgZGlyZWN0aW9ucyAtIG5vcnRoLCBlYXN0LCBzb3V0aCBhbmQgd2VzdFxuICogVGhlIGFycmF5IHJlcHJlc2VudHMgdGhlIHdlaWdodCBvZiBjaG9vc2luZyB0aGUgbmV4dCBkaXJlY3Rpb25cbiAqIDkwIGRlZ3JlZSB0dXJuIGNvc3RzIDEgcG9pbnRzXG4gKiBbMF0gLSBnbyBub3J0aCB3ZWlnaHRcbiAqIFsxXSAtIGdvIGVhc3Qgd2VpZ2h0XG4gKiBbMl0gLSBnbyBzb3V0aCB3ZWlnaHRcbiAqIFszXSAtIGdvIHdlc3Qgd2VpZ2h0XG4gKi9cbmV4cG9ydCBjb25zdCBub3J0aERpcmVjdGlvbldlaWdodHMgPSBbMCwgMSwgMiwgMV07XG5leHBvcnQgY29uc3QgZWFzdERpcmVjdGlvbldlaWdodHMgPSBbMSwgMCwgMSwgMl07XG5leHBvcnQgY29uc3Qgc291dGhEaXJlY3Rpb25XZWlnaHRzID0gWzIsIDEsIDAsIDFdO1xuZXhwb3J0IGNvbnN0IHdlc3REaXJlY3Rpb25XZWlnaHRzID0gWzEsIDIsIDEsIDBdO1xuXG5leHBvcnQgY29uc3QgbW92ZVdlaWdodCA9IDE7XG5cbi8qKlxuICogR2V0IGRpc3RhbmNlIGJldHdlZW4gdHdvIG5vZGVzIGJhc2VkIG9uIHRoZSB3ZWlnaHRcbiAqL1xuZXhwb3J0IGNvbnN0IGdldERpc3RhbmNlQmV0d2Vlbk5vZGVzID0gKG5vZGVfMSwgbm9kZV8yKSA9PiB7XG4gIC8vIG5vZGVfMiBpcyB1cFxuICBpZiAobm9kZV8xLnkgPCBub2RlXzIueSAmJiBub2RlXzEueCA9PT0gbm9kZV8yLngpIHtcbiAgICByZXR1cm4gbm9ydGhEaXJlY3Rpb25XZWlnaHRzW25vZGVfMS5kaXJlY3Rpb25dICsgbW92ZVdlaWdodDtcbiAgfVxuICAvLyBub2RlXzIgaXMgcmlnaHRcbiAgZWxzZSBpZiAobm9kZV8xLnggPCBub2RlXzIueCAmJiBub2RlXzEueSA9PT0gbm9kZV8yLnkpIHtcbiAgICByZXR1cm4gZWFzdERpcmVjdGlvbldlaWdodHNbbm9kZV8xLmRpcmVjdGlvbl0gKyBtb3ZlV2VpZ2h0O1xuICB9XG4gIC8vIG5vZGVfMiBpcyBib3R0b21cbiAgZWxzZSBpZiAobm9kZV8xLnkgPiBub2RlXzIueSAmJiBub2RlXzEueCA9PT0gbm9kZV8yLngpIHtcbiAgICByZXR1cm4gc291dGhEaXJlY3Rpb25XZWlnaHRzW25vZGVfMS5kaXJlY3Rpb25dICsgbW92ZVdlaWdodDtcbiAgfVxuICAvLyBub2RlXzIgaXMgbGVmdFxuICBlbHNlIGlmIChub2RlXzEueCA+IG5vZGVfMi54ICYmIG5vZGVfMS55ID09PSBub2RlXzIueSkge1xuICAgIHJldHVybiB3ZXN0RGlyZWN0aW9uV2VpZ2h0c1tub2RlXzEuZGlyZWN0aW9uXSArIG1vdmVXZWlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJTb21ldGhpbmcgd2VudCB3cm9uZyB3aGVuIHNldHRpbmcgdGhlIGRpc3RhbmNlIGJldHdlZW4gbm9kZXMuXCJcbiAgICApO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybiBkaXJlY3Rpb24gb2Ygbm9kZV8yIGJhc2VkIG9uIHRoZWlyIHBvc2l0aW9uc1xuICovXG5leHBvcnQgY29uc3QgZ2V0Tm9kZURpcmVjdGlvbiA9IChub2RlXzEsIG5vZGVfMikgPT4ge1xuICBpZiAobm9kZV8xLnkgPCBub2RlXzIueSAmJiBub2RlXzEueCA9PT0gbm9kZV8yLngpIHtcbiAgICByZXR1cm4gZGlyZWN0aW9uc1tcIm5vcnRoXCJdO1xuICB9IGVsc2UgaWYgKG5vZGVfMS54IDwgbm9kZV8yLnggJiYgbm9kZV8xLnkgPT09IG5vZGVfMi55KSB7XG4gICAgcmV0dXJuIGRpcmVjdGlvbnNbXCJlYXN0XCJdO1xuICB9IGVsc2UgaWYgKG5vZGVfMS55ID4gbm9kZV8yLnkgJiYgbm9kZV8xLnggPT09IG5vZGVfMi54KSB7XG4gICAgcmV0dXJuIGRpcmVjdGlvbnNbXCJzb3V0aFwiXTtcbiAgfSBlbHNlIGlmIChub2RlXzEueCA+IG5vZGVfMi54ICYmIG5vZGVfMS55ID09PSBub2RlXzIueSkge1xuICAgIHJldHVybiBkaXJlY3Rpb25zW1wid2VzdFwiXTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTb21ldGhpbmcgd2VudCB3cm9uZyB3aGVuIHNldHRpbmcgdGhlIGRpcmVjdGlvbiBvZiBub2RlLlwiKTtcbiAgfVxufTtcbiIsIi8qKlxuICogR2V0IG5vZGUgbmVpZ2hib3JzJ3Mga2V5c1xuICovXG5leHBvcnQgY29uc3QgZ2V0TmVpZ2hib3JzSWRzID0gKHVudmlzaXRlZE5vZGVzSWRzLCBub2RlcywgeCwgeSkgPT4ge1xuICBsZXQgYXJyID0gW107XG4gIGlmIChcbiAgICBub2Rlc1tgJHt4fS0ke3kgKyAxfWBdICYmXG4gICAgIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3h9LSR7eSArIDF9YCkuY2xhc3NMaXN0LmNvbnRhaW5zKFwid2FsbFwiKVxuICApIHtcbiAgICBhcnIucHVzaChgJHt4fS0ke3kgKyAxfWApO1xuICB9XG4gIGlmIChcbiAgICBub2Rlc1tgJHt4ICsgMX0tJHt5fWBdICYmXG4gICAgIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3ggKyAxfS0ke3l9YCkuY2xhc3NMaXN0LmNvbnRhaW5zKFwid2FsbFwiKVxuICApIHtcbiAgICBhcnIucHVzaChgJHt4ICsgMX0tJHt5fWApO1xuICB9XG4gIGlmIChcbiAgICBub2Rlc1tgJHt4fS0ke3kgLSAxfWBdICYmXG4gICAgIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3h9LSR7eSAtIDF9YCkuY2xhc3NMaXN0LmNvbnRhaW5zKFwid2FsbFwiKVxuICApIHtcbiAgICBhcnIucHVzaChgJHt4fS0ke3kgLSAxfWApO1xuICB9XG4gIGlmIChcbiAgICBub2Rlc1tgJHt4IC0gMX0tJHt5fWBdICYmXG4gICAgIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3ggLSAxfS0ke3l9YCkuY2xhc3NMaXN0LmNvbnRhaW5zKFwid2FsbFwiKVxuICApIHtcbiAgICBhcnIucHVzaChgJHt4IC0gMX0tJHt5fWApO1xuICB9XG5cbiAgcmV0dXJuIGFyci5maWx0ZXIoKHBvdGVudGlhbE5laWdoYm9ySWQpID0+XG4gICAgdW52aXNpdGVkTm9kZXNJZHMuZmluZCgobm9kZUlkKSA9PiBwb3RlbnRpYWxOZWlnaGJvcklkID09PSBub2RlSWQpXG4gICk7XG59O1xuIiwiaW1wb3J0IGFzeW5jRGVsYXkgZnJvbSBcIi4vYXN5bmNEZWxheVwiO1xuXG5leHBvcnQgY29uc3QgdmlzdWFsaXplUGF0aCA9IGFzeW5jICh2aXNpdGVkTm9kZXMsIHN0YXJ0LCBlbmQsIHNwZWVkKSA9PiB7XG4gIGxldCBwYXRoSWRzID0gW107XG4gIGxldCBmb3VuZFN0YXJ0ID0gZmFsc2U7XG4gIGxldCBjdXJyTm9kZSA9IHZpc2l0ZWROb2Rlc1tgJHtlbmQueH0tJHtlbmQueX1gXTtcbiAgcGF0aElkcy5wdXNoKGN1cnJOb2RlLmlkKTtcblxuICB3aGlsZSAoIWZvdW5kU3RhcnQpIHtcbiAgICBpZiAoY3Vyck5vZGUueCA9PT0gc3RhcnQueCAmJiBjdXJyTm9kZS55ID09PSBzdGFydC55KSB7XG4gICAgICBmb3VuZFN0YXJ0ID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBwYXRoSWRzLnB1c2goY3Vyck5vZGUucHJldklkKTtcbiAgICBjdXJyTm9kZSA9IHZpc2l0ZWROb2Rlc1tjdXJyTm9kZS5wcmV2SWRdO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IHBhdGhJZHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwYXRoSWRzW2ldKS5jbGFzc0xpc3QuYWRkKFwicGF0aFwiKTtcbiAgICBhd2FpdCBhc3luY0RlbGF5KHNwZWVkICsgMTAwKTtcbiAgfVxufTtcbiIsIi8qKlxuICogR2V0IHRoZSBjbG9zZXN0IG5vZGVcbiAqL1xuXG5leHBvcnQgY29uc3QgZ2V0Q2xvc2VzdE5vZGUgPSAodW52aXNpdGVkSWRzLCBub2RlcykgPT4ge1xuICBsZXQgbWluID0gSW5maW5pdHk7XG4gIGxldCBtaW5EaXN0Tm9kZUlkID0gMDtcbiAgbGV0IGluZGV4ID0gMDtcblxuICB1bnZpc2l0ZWRJZHMuZm9yRWFjaCgoaWQsIGkpID0+IHtcbiAgICBpZiAobm9kZXNbaWRdKSB7XG4gICAgICBpZiAobm9kZXNbaWRdLmRpc3QgPCBtaW4pIHtcbiAgICAgICAgbWluID0gbm9kZXNbaWRdLmRpc3Q7XG4gICAgICAgIG1pbkRpc3ROb2RlSWQgPSBpZDtcbiAgICAgICAgaW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgdW52aXNpdGVkSWRzLnNwbGljZShpbmRleCwgMSk7XG5cbiAgcmV0dXJuIG5vZGVzW21pbkRpc3ROb2RlSWRdO1xufTtcbiIsImltcG9ydCB7IGdldFJhbmRvbU51bSB9IGZyb20gXCIuL2dldFJhbmRvbU51bVwiO1xuXG5leHBvcnQgY29uc3QgZ2V0RGlmZmVyZW50UmFuZG9tTnVtID0gKG1pbiwgbWF4LCBkaWZmZXJlbnRGcm9tKSA9PiB7XG4gIGxldCByYW5kO1xuICBkbyB7XG4gICAgcmFuZCA9IGdldFJhbmRvbU51bShtaW4sIG1heCk7XG4gIH0gd2hpbGUgKHJhbmQgPT09IGRpZmZlcmVudEZyb20pO1xuXG4gIHJldHVybiByYW5kO1xufTtcbiIsImNsYXNzIE5vZGUge1xuICBjb25zdHJ1Y3RvcihzdGF0dXMsIHgsIHksIGRpc3QsIHByZXZJZCwgZGlyZWN0aW9uKSB7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5pZCA9IGAke3h9LSR7eX1gO1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLmRpc3QgPSBkaXN0O1xuICAgIHRoaXMucHJldklkID0gcHJldklkO1xuICAgIHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgIHRoaXMudXBkYXRlID0gdGhpcy51cGRhdGUuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHVwZGF0ZSh2YWx1ZXMpIHtcbiAgICBmb3IgKGxldCBmaWVsZEtleSBvZiBPYmplY3Qua2V5cyh0aGlzKSkge1xuICAgICAgZm9yIChsZXQgdmFsS2V5IG9mIE9iamVjdC5rZXlzKHZhbHVlcykpIHtcbiAgICAgICAgaWYgKGZpZWxkS2V5ID09PSB2YWxLZXkpIHtcbiAgICAgICAgICB0aGlzW2ZpZWxkS2V5XSA9IHZhbHVlc1t2YWxLZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGU7XG4iLCJpbXBvcnQgXCIuL2Fzc2V0cy9zYXNzL21haW4uc2Nzc1wiO1xuaW1wb3J0IEJvYXJkIGZyb20gXCIuL21vZHVsZXMvQm9hcmRcIjtcbmltcG9ydCB7IGRpamtzdHJhIH0gZnJvbSBcIi4vbW9kdWxlcy9hbGdvcml0aG1zL2RpamtzdHJhXCI7XG5pbXBvcnQgeyBicmVhZHRoRmlyc3QgfSBmcm9tIFwiLi9tb2R1bGVzL2FsZ29yaXRobXMvYnJlYWR0aEZpcnN0XCI7XG5pbXBvcnQgeyBkZXB0aEZpcnN0IH0gZnJvbSBcIi4vbW9kdWxlcy9hbGdvcml0aG1zL2RlcHRoRmlyc3RcIjtcblxuY29uc3QgcGF0aGZpbmRpbmdBbGdvcml0aG1zID0ge1xuICBkaWprc3RyYToge1xuICAgIG5hbWU6IFwiRGlqa3N0cmFcIixcbiAgICBmdW5jOiBkaWprc3RyYSxcbiAgfSxcbiAgYmZzOiB7XG4gICAgbmFtZTogXCJCcmVhZHRoLUZpcnN0IFNlYXJjaFwiLFxuICAgIGZ1bmM6IGJyZWFkdGhGaXJzdCxcbiAgfSxcbiAgZGZzOiB7XG4gICAgbmFtZTogXCJEZXB0aC1GaXJzdCBTZWFyY2hcIixcbiAgICBmdW5jOiBkZXB0aEZpcnN0LFxuICB9LFxufTtcblxuY29uc3QgYm9hcmQgPSBuZXcgQm9hcmQoXCJib2FyZFwiLCAyNSwgcGF0aGZpbmRpbmdBbGdvcml0aG1zKTtcbmJvYXJkLmluaXRpYWxpemUoKTtcbiIsImltcG9ydCB7IGNyZWF0ZUJsb2NrIH0gZnJvbSBcIi4vaGVscGVycy9ibG9ja1wiO1xuaW1wb3J0IHsgZ2V0UmFuZG9tTnVtIH0gZnJvbSBcIi4vaGVscGVycy9nZXRSYW5kb21OdW1cIjtcbmltcG9ydCB7IGRpamtzdHJhIH0gZnJvbSBcIi4vYWxnb3JpdGhtcy9kaWprc3RyYVwiO1xuaW1wb3J0IHsgYnJlYWR0aEZpcnN0IH0gZnJvbSBcIi4vYWxnb3JpdGhtcy9icmVhZHRoRmlyc3RcIjtcbmltcG9ydCB7IGdldERpZmZlcmVudFJhbmRvbU51bSB9IGZyb20gXCIuL2hlbHBlcnMvZ2V0RGlmZmVyZW50UmFuZG9tTnVtXCI7XG5pbXBvcnQgTm9kZSBmcm9tIFwiLi9Ob2RlXCI7XG5pbXBvcnQgeyBkaXJlY3Rpb25zLCBnZXREaXJlY3Rpb25OYW1lIH0gZnJvbSBcIi4vYWxnb3JpdGhtcy9oZWxwZXJzL3dlaWdodGVkXCI7XG5cbmNsYXNzIEJvYXJkIHtcbiAgY29uc3RydWN0b3IoYm9hcmRJZCwgYmxvY2tTaXplLCBhbGdvcml0aG1zKSB7XG4gICAgdGhpcy5ib2FyZElkID0gYm9hcmRJZDtcbiAgICB0aGlzLmJsb2NrU2l6ZSA9IGJsb2NrU2l6ZTtcbiAgICB0aGlzLndpZHRoID0gbnVsbDtcbiAgICB0aGlzLmhlaWdodCA9IG51bGw7XG4gICAgdGhpcy5ub2RlcyA9IHt9O1xuICAgIHRoaXMuc3RhcnROb2RlID0gbnVsbDtcbiAgICB0aGlzLmVuZE5vZGUgPSBudWxsO1xuICAgIHRoaXMuaXNNYWtpbmdXYWxscyA9IGZhbHNlO1xuICAgIHRoaXMuaXNOb2RlRHJhZ2dlZCA9IGZhbHNlO1xuICAgIHRoaXMuZHJhZ2dlZE5vZGVDbGFzc0xpc3QgPSBudWxsO1xuICAgIHRoaXMuYWxnb3JpdGhtcyA9IGFsZ29yaXRobXM7XG4gICAgdGhpcy5jdXJyZW50QWxnb3JpdGhtID0gbnVsbDtcbiAgICB0aGlzLnNwZWVkID0gNDA7XG4gICAgdGhpcy5pc1NlYXJjaGluZyA9IGZhbHNlO1xuICAgIHRoaXMuaXNQcmVwYXJlZCA9IGZhbHNlO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLmNyZWF0ZU5hdigpO1xuICAgIHRoaXMuY2FsY3VsYXRlQm9hcmRTaXplKCk7XG4gICAgdGhpcy5jcmVhdGVCb2FyZCgpO1xuICAgIHRoaXMuc2V0U3RhcnROb2RlKCk7XG4gICAgdGhpcy5zZXRFbmROb2RlKCk7XG5cbiAgICB0aGlzLnNldEN1cnJlbnRBbGdvcml0aG0oXCJkaWprc3RyYVwiKTtcblxuICAgIHRoaXMuYWRkTmF2QWxnb0VsZW1zRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLmFkZEJsb2Nrc0V2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5hZGRCdG5zRXZlbnRMaXN0ZW5lcnMoKTtcblxuICAgIGNvbnNvbGUubG9nKHRoaXMpO1xuICAgIHRoaXMuaXNQcmVwYXJlZCA9IHRydWU7XG4gIH1cblxuICBjYWxjdWxhdGVCb2FyZFNpemUoKSB7XG4gICAgY29uc3QgYm9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmJvYXJkSWQpO1xuICAgIGNvbnN0IHB4V2lkdGggPSBib2FyZC5jbGllbnRXaWR0aDtcbiAgICBjb25zdCBweEhlaWdodCA9IGJvYXJkLmNsaWVudEhlaWdodDtcblxuICAgIHRoaXMud2lkdGggPSBNYXRoLmZsb29yKHB4V2lkdGggLyB0aGlzLmJsb2NrU2l6ZSk7XG4gICAgdGhpcy5oZWlnaHQgPSBNYXRoLmZsb29yKHB4SGVpZ2h0IC8gdGhpcy5ibG9ja1NpemUpO1xuICB9XG5cbiAgY3JlYXRlQm9hcmQoKSB7XG4gICAgY29uc3QgYm9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmJvYXJkSWQpO1xuICAgIGNvbnN0IHRib2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRib2R5XCIpO1xuXG4gICAgZm9yIChsZXQgeSA9IHRoaXMuaGVpZ2h0IC0gMTsgeSA+PSAwOyB5LS0pIHtcbiAgICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy53aWR0aDsgeCsrKSB7XG4gICAgICAgIGNyZWF0ZUJsb2NrKHJvdywgdGhpcy5ibG9ja1NpemUsIHgsIHkpO1xuXG4gICAgICAgIGNvbnN0IG5ld05vZGUgPSBuZXcgTm9kZShcImJsb2NrXCIsIHgsIHksIEluZmluaXR5LCBudWxsLCBudWxsKTtcbiAgICAgICAgdGhpcy5ub2Rlc1tuZXdOb2RlLmlkXSA9IG5ld05vZGU7XG4gICAgICB9XG4gICAgICB0Ym9keS5hcHBlbmRDaGlsZChyb3cpO1xuICAgIH1cblxuICAgIGJvYXJkLmFwcGVuZENoaWxkKHRib2R5KTtcbiAgfVxuXG4gIGNyZWF0ZU5hdigpIHtcbiAgICBjb25zdCBuYXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hdlwiKTtcbiAgICBmb3IgKGxldCBba2V5LCBhbGdvXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLmFsZ29yaXRobXMpKSB7XG4gICAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChcIm5hdi1hbGdvcml0aG0tanNcIik7XG4gICAgICBlbGVtLmlubmVyVGV4dCA9IGFsZ28ubmFtZTtcbiAgICAgIGVsZW0uZGF0YXNldC5hbGdvcml0aG1LZXkgPSBrZXk7XG4gICAgICBuYXYuYXBwZW5kQ2hpbGQoZWxlbSk7XG4gICAgfVxuICB9XG5cbiAgc2V0Q3VycmVudEFsZ29yaXRobShhbGdvKSB7XG4gICAgdGhpcy5jdXJyZW50QWxnb3JpdGhtID0gdGhpcy5hbGdvcml0aG1zW2FsZ29dLmZ1bmM7XG4gICAgY29uc3QgZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm5hdi1hbGdvcml0aG0tanNcIik7XG4gICAgZWxlbXNbMF0uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgfVxuXG4gIHNldFN0YXJ0Tm9kZSgpIHtcbiAgICBjb25zdCByYW5kWCA9IGdldFJhbmRvbU51bSgwLCB0aGlzLndpZHRoIC0gMSk7XG4gICAgY29uc3QgcmFuZFkgPSBnZXRSYW5kb21OdW0oMCwgdGhpcy5oZWlnaHQgLSAxKTtcblxuICAgIHRoaXMubm9kZXNbYCR7cmFuZFh9LSR7cmFuZFl9YF0udXBkYXRlKHtcbiAgICAgIHN0YXR1czogXCJzdGFydFwiLFxuICAgICAgZGlzdDogMCxcbiAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uc1tcImVhc3RcIl0sXG4gICAgfSk7XG4gICAgdGhpcy5zdGFydE5vZGUgPSB0aGlzLm5vZGVzW2Ake3JhbmRYfS0ke3JhbmRZfWBdO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuc3RhcnROb2RlLmlkKS5jbGFzc0xpc3QuYWRkKFwic3RhcnRcIiwgXCJlYXN0XCIpO1xuICB9XG5cbiAgc2V0RW5kTm9kZSgpIHtcbiAgICBjb25zdCByYW5kWCA9IGdldERpZmZlcmVudFJhbmRvbU51bSgwLCB0aGlzLndpZHRoIC0gMSwgdGhpcy5zdGFydE5vZGUueCk7XG4gICAgY29uc3QgcmFuZFkgPSBnZXREaWZmZXJlbnRSYW5kb21OdW0oMCwgdGhpcy5oZWlnaHQgLSAxLCB0aGlzLnN0YXJ0Tm9kZS55KTtcblxuICAgIHRoaXMubm9kZXNbYCR7cmFuZFh9LSR7cmFuZFl9YF0uc3RhdHVzID0gXCJlbmRcIjtcbiAgICB0aGlzLm5vZGVzW2Ake3JhbmRYfS0ke3JhbmRZfWBdLnVwZGF0ZSh7XG4gICAgICBzdGF0dXM6IFwiZW5kXCIsXG4gICAgfSk7XG5cbiAgICB0aGlzLmVuZE5vZGUgPSB0aGlzLm5vZGVzW2Ake3JhbmRYfS0ke3JhbmRZfWBdO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZW5kTm9kZS5pZCkuY2xhc3NMaXN0LmFkZChcImVuZFwiKTtcbiAgfVxuXG4gIGFkZE5hdkFsZ29FbGVtc0V2ZW50TGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IGVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5uYXYtYWxnb3JpdGhtLWpzXCIpO1xuXG4gICAgZWxlbXMuZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgY29uc3QgaXNCbG9ja2VkID0gZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYmxvY2tlZFwiKTtcbiAgICAgICAgaWYgKGlzQmxvY2tlZCkgcmV0dXJuO1xuXG4gICAgICAgIGVsZW1zLmZvckVhY2goKGVsZW0pID0+IGVsZW0uY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKSk7XG4gICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgICAgIHRoaXMuY3VycmVudEFsZ29yaXRobSA9IHRoaXMuYWxnb3JpdGhtc1tcbiAgICAgICAgICBlLnRhcmdldC5kYXRhc2V0LmFsZ29yaXRobUtleVxuICAgICAgICBdLmZ1bmM7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFkZEJ0bnNFdmVudExpc3RlbmVycygpIHtcbiAgICBjb25zdCBzdGFydEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhcnRCdG5cIik7XG4gICAgY29uc3QgY2xlYXJCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNsZWFyQnRuXCIpO1xuXG4gICAgc3RhcnRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jIChlKSA9PiB7XG4gICAgICBpZiAodGhpcy5pc1ByZXBhcmVkKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlSXNTZWFyY2hpbmdTdGF0ZSh0cnVlKTtcbiAgICAgICAgdGhpcy5oYW5kbGVJc1ByZXBhcmVkU3RhdGUoZmFsc2UpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuY3VycmVudEFsZ29yaXRobShcbiAgICAgICAgICB0aGlzLm5vZGVzLFxuICAgICAgICAgIHRoaXMuc3RhcnROb2RlLFxuICAgICAgICAgIHRoaXMuZW5kTm9kZSxcbiAgICAgICAgICB0aGlzLnNwZWVkXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuaGFuZGxlSXNTZWFyY2hpbmdTdGF0ZShmYWxzZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjbGVhckJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgIGlmICghdGhpcy5pc1NlYXJjaGluZykge1xuICAgICAgICB0aGlzLmNsZWFyQm9hcmQoKTtcbiAgICAgICAgdGhpcy5oYW5kbGVJc1ByZXBhcmVkU3RhdGUodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBhZGRCbG9ja3NFdmVudExpc3RlbmVycygpIHtcbiAgICBjb25zdCBibG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnVudmlzaXRlZFwiKTtcblxuICAgIGJsb2Nrcy5mb3JFYWNoKChibG9jaykgPT4ge1xuICAgICAgYmxvY2suYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuaGFuZGxlTW91c2VEb3duKGJsb2NrKTtcbiAgICAgIH0pO1xuXG4gICAgICBibG9jay5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuaGFuZGxlTW91c2VFbnRlcihibG9jayk7XG4gICAgICB9KTtcblxuICAgICAgYmxvY2suYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmhhbmRsZU1vdXNlVXAoYmxvY2spO1xuICAgICAgfSk7XG5cbiAgICAgIGJsb2NrLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZUxlYXZlKGJsb2NrKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlTW91c2VEb3duKGJsb2NrKSB7XG4gICAgY29uc3QgaWQgPSBibG9jay5pZDtcbiAgICBpZiAoIXRoaXMuaXNOb2RlQmxvY2soaWQpKSB7XG4gICAgICB0aGlzLmRyYWdnZWROb2RlSWQgPSBpZDtcbiAgICAgIHRoaXMuaXNOb2RlRHJhZ2dlZCA9IHRydWU7XG4gICAgfSBlbHNlIGlmICghdGhpcy5pc05vZGVEcmFnZ2VkKSB7XG4gICAgICB0aGlzLmNyZWF0ZVdhbGwoYmxvY2spO1xuICAgICAgdGhpcy5zZXRNYWtpbmdXYWxsc1N0YXRlKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZU1vdXNlRW50ZXIoYmxvY2spIHtcbiAgICBpZiAodGhpcy5pc05vZGVEcmFnZ2VkICYmICF0aGlzLmlzQmxvY2tXYWxsKGJsb2NrKSkge1xuICAgICAgY29uc3QgZHJhZ2dlZE5vZGUgPSB0aGlzLm5vZGVzW3RoaXMuZHJhZ2dlZE5vZGVJZF07XG4gICAgICBpZiAoZHJhZ2dlZE5vZGUuc3RhdHVzID09PSBcInN0YXJ0XCIgJiYgIWJsb2NrLmNsYXNzTGlzdC5jb250YWlucyhcImVuZFwiKSkge1xuICAgICAgICBjb25zdCBkaXJlY3Rpb25OYW1lID0gZ2V0RGlyZWN0aW9uTmFtZShkcmFnZ2VkTm9kZS5kaXJlY3Rpb24pO1xuICAgICAgICBibG9jay5jbGFzc0xpc3QuYWRkKFwic3RhcnRcIiwgZGlyZWN0aW9uTmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBkcmFnZ2VkTm9kZS5zdGF0dXMgPT09IFwiZW5kXCIgJiZcbiAgICAgICAgIWJsb2NrLmNsYXNzTGlzdC5jb250YWlucyhcInN0YXJ0XCIpXG4gICAgICApIHtcbiAgICAgICAgYmxvY2suY2xhc3NMaXN0LmFkZChcImVuZFwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNNYWtpbmdXYWxscyAmJiB0aGlzLmlzTm9kZUJsb2NrKGJsb2NrLmlkKSkge1xuICAgICAgdGhpcy5jcmVhdGVXYWxsKGJsb2NrKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVNb3VzZVVwKGJsb2NrKSB7XG4gICAgY29uc3QgaWQgPSBibG9jay5pZDtcbiAgICBpZiAoXG4gICAgICB0aGlzLmlzTm9kZURyYWdnZWQgJiZcbiAgICAgIGlkICE9PSB0aGlzLmRyYWdnZWROb2RlSWQgJiZcbiAgICAgICF0aGlzLmlzQmxvY2tXYWxsKGJsb2NrKVxuICAgICkge1xuICAgICAgaWYgKHRoaXMubm9kZXNbdGhpcy5kcmFnZ2VkTm9kZUlkXS5zdGF0dXMgPT09IFwic3RhcnRcIikge1xuICAgICAgICB0aGlzLm5vZGVzW2lkXS51cGRhdGUoe1xuICAgICAgICAgIHN0YXR1czogXCJzdGFydFwiLFxuICAgICAgICAgIGRpc3Q6IDAsXG4gICAgICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb25zW1wiZWFzdFwiXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RhcnROb2RlID0gdGhpcy5ub2Rlc1tpZF07XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubm9kZXNbdGhpcy5kcmFnZ2VkTm9kZUlkXS5zdGF0dXMgPT09IFwiZW5kXCIpIHtcbiAgICAgICAgdGhpcy5ub2Rlc1tpZF0udXBkYXRlKHtcbiAgICAgICAgICBzdGF0dXM6IFwiZW5kXCIsXG4gICAgICAgICAgZGlzdDogSW5maW5pdHksXG4gICAgICAgICAgZGlyZWN0aW9uOiBudWxsLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbmROb2RlID0gdGhpcy5ub2Rlc1tpZF07XG4gICAgICB9XG5cbiAgICAgIC8vIHVwZGF0ZSB0aGUgaW5pdGlhbGx5IGRyYWdnZWQgbm9kZVxuICAgICAgdGhpcy5ub2Rlc1t0aGlzLmRyYWdnZWROb2RlSWRdLnVwZGF0ZSh7XG4gICAgICAgIHN0YXR1czogXCJibG9ja1wiLFxuICAgICAgICBkaXN0OiBJbmZpbml0eSxcbiAgICAgICAgZGlyZWN0aW9uOiBudWxsLFxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuaXNOb2RlRHJhZ2dlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5kcmFnZ2VkTm9kZUlkID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRNYWtpbmdXYWxsc1N0YXRlKGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVNb3VzZUxlYXZlKGJsb2NrKSB7XG4gICAgaWYgKHRoaXMuaXNOb2RlRHJhZ2dlZCkge1xuICAgICAgY29uc3QgZHJhZ2dlZE5vZGUgPSB0aGlzLm5vZGVzW3RoaXMuZHJhZ2dlZE5vZGVJZF07XG4gICAgICBpZiAoZHJhZ2dlZE5vZGUuc3RhdHVzID09PSBcInN0YXJ0XCIpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uTmFtZSA9IGdldERpcmVjdGlvbk5hbWUoZHJhZ2dlZE5vZGUuZGlyZWN0aW9uKTtcbiAgICAgICAgYmxvY2suY2xhc3NMaXN0LnJlbW92ZShcInN0YXJ0XCIsIGRpcmVjdGlvbk5hbWUpO1xuICAgICAgfSBlbHNlIGlmIChkcmFnZ2VkTm9kZS5zdGF0dXMgPT09IFwiZW5kXCIpIHtcbiAgICAgICAgYmxvY2suY2xhc3NMaXN0LnJlbW92ZShcImVuZFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvL1xuICBpc05vZGVCbG9jayhpZCkge1xuICAgIHJldHVybiAhKFxuICAgICAgdGhpcy5ub2Rlc1tpZF0uc3RhdHVzID09PSBcInN0YXJ0XCIgfHwgdGhpcy5ub2Rlc1tpZF0uc3RhdHVzID09PSBcImVuZFwiXG4gICAgKTtcbiAgfVxuXG4gIC8vIFdBTExTXG4gIGNyZWF0ZVdhbGwoYmxvY2spIHtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IGJsb2NrLmNsYXNzTGlzdC5hZGQoXCJ3YWxsXCIpKTtcbiAgfVxuXG4gIGlzQmxvY2tXYWxsKGJsb2NrKSB7XG4gICAgcmV0dXJuIGJsb2NrLmNsYXNzTGlzdC5jb250YWlucyhcIndhbGxcIik7XG4gIH1cblxuICBzZXRNYWtpbmdXYWxsc1N0YXRlKGJvb2wpIHtcbiAgICB0aGlzLmlzTWFraW5nV2FsbHMgPSBib29sO1xuICB9XG5cbiAgaGFuZGxlSXNTZWFyY2hpbmdTdGF0ZShpc1NlYXJjaGluZykge1xuICAgIHRoaXMuaXNTZWFyY2hpbmcgPSBpc1NlYXJjaGluZztcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNsZWFyQnRuXCIpLmRpc2FibGVkID0gaXNTZWFyY2hpbmc7XG4gIH1cblxuICBoYW5kbGVJc1ByZXBhcmVkU3RhdGUoaXNQcmVwYXJlZCkge1xuICAgIHRoaXMuaXNQcmVwYXJlZCA9IGlzUHJlcGFyZWQ7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGFydEJ0blwiKS5kaXNhYmxlZCA9ICFpc1ByZXBhcmVkO1xuICB9XG5cbiAgY2xlYXJCb2FyZCgpIHtcbiAgICBmb3IgKGxldCB5ID0gdGhpcy5oZWlnaHQgLSAxOyB5ID49IDA7IHktLSkge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcbiAgICAgICAgdGhpcy5ub2Rlc1tgJHt4fS0ke3l9YF0udXBkYXRlKHtcbiAgICAgICAgICBzdGF0dXM6IFwiYmxvY2tcIixcbiAgICAgICAgICBkaXN0OiBJbmZpbml0eSxcbiAgICAgICAgICBwcmV2SWQ6IG51bGwsXG4gICAgICAgICAgZGlyZWN0aW9uOiBudWxsLFxuICAgICAgICB9KTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7eH0tJHt5fWApLmNsYXNzTGlzdCA9IFtdO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHt4fS0ke3l9YCkuY2xhc3NMaXN0LmFkZChcInVudmlzaXRlZFwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zZXRTdGFydE5vZGUoKTtcbiAgICB0aGlzLnNldEVuZE5vZGUoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCb2FyZDtcbiIsImltcG9ydCBhc3luY0RlbGF5IGZyb20gXCIuLi9oZWxwZXJzL2FzeW5jRGVsYXlcIjtcbmltcG9ydCB7IGdldERpc3RhbmNlQmV0d2Vlbk5vZGVzLCBnZXROb2RlRGlyZWN0aW9uIH0gZnJvbSBcIi4vaGVscGVycy93ZWlnaHRlZFwiO1xuaW1wb3J0IHsgZ2V0TmVpZ2hib3JzSWRzIH0gZnJvbSBcIi4vaGVscGVycy9uZWlnaGJvcnNcIjtcbmltcG9ydCB7IHZpc3VhbGl6ZVBhdGggfSBmcm9tIFwiLi4vaGVscGVycy92aXN1YWxpemVQYXRoXCI7XG5pbXBvcnQgeyBnZXRDbG9zZXN0Tm9kZSB9IGZyb20gXCIuL2hlbHBlcnMvbm9kZXNcIjtcblxuZXhwb3J0IGNvbnN0IGRpamtzdHJhID0gYXN5bmMgKG5vZGVzLCBzdGFydCwgZW5kLCBzcGVlZCkgPT4ge1xuICBsZXQgdW52aXNpdGVkTm9kZXNJZHMgPSBPYmplY3Qua2V5cyhub2Rlcyk7XG5cbiAgbGV0IHZpc2l0ZWROb2RlcyA9IHt9O1xuICBsZXQgZm91bmRFbmQgPSBmYWxzZTtcbiAgY29uc3QgaXNTYW1lTm9kZSA9IChuMSwgbjIpID0+IG4xLnggPT09IG4yLnggJiYgbjEueSA9PT0gbjIueTtcblxuICB3aGlsZSAodW52aXNpdGVkTm9kZXNJZHMubGVuZ3RoKSB7XG4gICAgY29uc3QgY3Vyck5vZGUgPSBnZXRDbG9zZXN0Tm9kZSh1bnZpc2l0ZWROb2Rlc0lkcywgbm9kZXMpO1xuICAgIC8vIFZJU1VBTElaRVxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGN1cnJOb2RlLmlkKS5jbGFzc0xpc3QuYWRkKFwidmlzaXRlZFwiKTtcbiAgICBhd2FpdCBhc3luY0RlbGF5KHNwZWVkKTtcblxuICAgIGlmICghY3Vyck5vZGUpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHZpc2l0ZWROb2Rlc1tjdXJyTm9kZS5pZF0gPSBjdXJyTm9kZTtcblxuICAgIGlmIChpc1NhbWVOb2RlKGN1cnJOb2RlLCBlbmQpKSB7XG4gICAgICBmb3VuZEVuZCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBnZXROZWlnaGJvcnNJZHModW52aXNpdGVkTm9kZXNJZHMsIG5vZGVzLCBjdXJyTm9kZS54LCBjdXJyTm9kZS55KS5mb3JFYWNoKFxuICAgICAgKG5laWdoYm9ySWQpID0+IHtcbiAgICAgICAgY29uc3QgZGlzdGFuY2VCZXR3ZWVuTm9kZXMgPSBnZXREaXN0YW5jZUJldHdlZW5Ob2RlcyhcbiAgICAgICAgICBjdXJyTm9kZSxcbiAgICAgICAgICBub2Rlc1tuZWlnaGJvcklkXVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFZJU1VBTElaRVxuICAgICAgICBkb2N1bWVudFxuICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChub2Rlc1tuZWlnaGJvcklkXS5pZClcbiAgICAgICAgICAuY2xhc3NMaXN0LnJlbW92ZShcIm5laWdoYm9yXCIpO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG5vZGVzW25laWdoYm9ySWRdLmlkKS5jbGFzc0xpc3QuYWRkKFwibmVpZ2hib3JcIik7XG5cbiAgICAgICAgY29uc3QgaXNOZWlnaGJvckZ1cnRoZXJGcm9tU3RhcnQgPVxuICAgICAgICAgIGN1cnJOb2RlLmRpc3QgKyBkaXN0YW5jZUJldHdlZW5Ob2RlcyA8IG5vZGVzW25laWdoYm9ySWRdLmRpc3Q7XG5cbiAgICAgICAgaWYgKGlzTmVpZ2hib3JGdXJ0aGVyRnJvbVN0YXJ0KSB7XG4gICAgICAgICAgbm9kZXNbbmVpZ2hib3JJZF0uZGlzdCA9IGN1cnJOb2RlLmRpc3QgKyBkaXN0YW5jZUJldHdlZW5Ob2RlcztcbiAgICAgICAgICBub2Rlc1tuZWlnaGJvcklkXS5wcmV2SWQgPSBjdXJyTm9kZS5pZDtcbiAgICAgICAgICBub2Rlc1tuZWlnaGJvcklkXS5kaXJlY3Rpb24gPSBnZXROb2RlRGlyZWN0aW9uKFxuICAgICAgICAgICAgY3Vyck5vZGUsXG4gICAgICAgICAgICBub2Rlc1tuZWlnaGJvcklkXVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgaWYgKGZvdW5kRW5kKSB7XG4gICAgdmlzdWFsaXplUGF0aCh2aXNpdGVkTm9kZXMsIHN0YXJ0LCBlbmQsIHNwZWVkKTtcbiAgfVxufTtcbiIsImltcG9ydCBhc3luY0RlbGF5IGZyb20gXCIuLi9oZWxwZXJzL2FzeW5jRGVsYXlcIjtcbmltcG9ydCB7IGdldE5laWdoYm9yc0lkcyB9IGZyb20gXCIuL2hlbHBlcnMvbmVpZ2hib3JzXCI7XG5pbXBvcnQgeyB2aXN1YWxpemVQYXRoIH0gZnJvbSBcIi4uL2hlbHBlcnMvdmlzdWFsaXplUGF0aFwiO1xuaW1wb3J0IHsgZ2V0Q2xvc2VzdE5vZGUgfSBmcm9tIFwiLi9oZWxwZXJzL25vZGVzXCI7XG5cbmV4cG9ydCBjb25zdCBicmVhZHRoRmlyc3QgPSBhc3luYyAobm9kZXMsIHN0YXJ0LCBlbmQsIHNwZWVkKSA9PiB7XG4gIGxldCB1bnZpc2l0ZWROb2Rlc0lkcyA9IE9iamVjdC5rZXlzKG5vZGVzKTtcblxuICBsZXQgdmlzaXRlZE5vZGVzID0ge307XG4gIGxldCBmb3VuZEVuZCA9IGZhbHNlO1xuICBjb25zdCBpc1NhbWVOb2RlID0gKG4xLCBuMikgPT4gbjEueCA9PT0gbjIueCAmJiBuMS55ID09PSBuMi55O1xuXG4gIHdoaWxlICh1bnZpc2l0ZWROb2Rlc0lkcy5sZW5ndGgpIHtcbiAgICBjb25zdCBjdXJyTm9kZSA9IGdldENsb3Nlc3ROb2RlKHVudmlzaXRlZE5vZGVzSWRzLCBub2Rlcyk7XG4gICAgLy8gVklTVUFMSVpFXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY3Vyck5vZGUuaWQpLmNsYXNzTGlzdC5hZGQoXCJ2aXNpdGVkXCIpO1xuICAgIGF3YWl0IGFzeW5jRGVsYXkoc3BlZWQpO1xuXG4gICAgaWYgKCFjdXJyTm9kZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdmlzaXRlZE5vZGVzW2N1cnJOb2RlLmlkXSA9IGN1cnJOb2RlO1xuXG4gICAgaWYgKGlzU2FtZU5vZGUoY3Vyck5vZGUsIGVuZCkpIHtcbiAgICAgIGZvdW5kRW5kID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGdldE5laWdoYm9yc0lkcyh1bnZpc2l0ZWROb2Rlc0lkcywgbm9kZXMsIGN1cnJOb2RlLngsIGN1cnJOb2RlLnkpLmZvckVhY2goXG4gICAgICAobmVpZ2hib3JJZCkgPT4ge1xuICAgICAgICBjb25zdCBpc05laWdoYm9yRnVydGhlckZyb21TdGFydCA9XG4gICAgICAgICAgY3Vyck5vZGUuZGlzdCA8IG5vZGVzW25laWdoYm9ySWRdLmRpc3Q7XG5cbiAgICAgICAgaWYgKGlzTmVpZ2hib3JGdXJ0aGVyRnJvbVN0YXJ0KSB7XG4gICAgICAgICAgbm9kZXNbbmVpZ2hib3JJZF0uZGlzdCA9IGN1cnJOb2RlLmRpc3QgKyAxO1xuICAgICAgICAgIG5vZGVzW25laWdoYm9ySWRdLnByZXZJZCA9IGN1cnJOb2RlLmlkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVklTVUFMSVpFXG4gICAgICAgIGRvY3VtZW50XG4gICAgICAgICAgLmdldEVsZW1lbnRCeUlkKG5vZGVzW25laWdoYm9ySWRdLmlkKVxuICAgICAgICAgIC5jbGFzc0xpc3QucmVwbGFjZShcInVudmlzaXRlZFwiLCBcIm5laWdoYm9yXCIpO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBpZiAoZm91bmRFbmQpIHtcbiAgICB2aXN1YWxpemVQYXRoKHZpc2l0ZWROb2Rlcywgc3RhcnQsIGVuZCwgc3BlZWQpO1xuICB9XG59O1xuIiwiaW1wb3J0IGFzeW5jRGVsYXkgZnJvbSBcIi4uL2hlbHBlcnMvYXN5bmNEZWxheVwiO1xuaW1wb3J0IHsgZ2V0TmVpZ2hib3JzSWRzIH0gZnJvbSBcIi4vaGVscGVycy9uZWlnaGJvcnNcIjtcbmltcG9ydCB7IHZpc3VhbGl6ZVBhdGggfSBmcm9tIFwiLi4vaGVscGVycy92aXN1YWxpemVQYXRoXCI7XG5pbXBvcnQgeyBnZXRDbG9zZXN0Tm9kZSB9IGZyb20gXCIuL2hlbHBlcnMvbm9kZXNcIjtcblxuZXhwb3J0IGNvbnN0IGRlcHRoRmlyc3QgPSBhc3luYyAobm9kZXMsIHN0YXJ0LCBlbmQsIHNwZWVkKSA9PiB7XG4gIGxldCB1bnZpc2l0ZWROb2Rlc0lkcyA9IE9iamVjdC5rZXlzKG5vZGVzKTtcblxuICBsZXQgdmlzaXRlZE5vZGVzID0ge307XG4gIGxldCBmb3VuZEVuZCA9IGZhbHNlO1xuICBjb25zdCBpc1NhbWVOb2RlID0gKG4xLCBuMikgPT4gbjEueCA9PT0gbjIueCAmJiBuMS55ID09PSBuMi55O1xuXG4gIGNvbnN0IHNlYXJjaCA9IGFzeW5jIChjdXJyTm9kZSwgcHJldklkKSA9PiB7XG4gICAgaWYgKGZvdW5kRW5kKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVklTVUFMSVpFXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY3Vyck5vZGUuaWQpLmNsYXNzTGlzdC5hZGQoXCJ2aXNpdGVkXCIpO1xuICAgIGF3YWl0IGFzeW5jRGVsYXkoc3BlZWQpO1xuXG4gICAgaWYgKCFjdXJyTm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGN1cnJOb2RlLnByZXZJZCA9IHByZXZJZDtcblxuICAgIHZpc2l0ZWROb2Rlc1tjdXJyTm9kZS5pZF0gPSBjdXJyTm9kZTtcbiAgICB1bnZpc2l0ZWROb2Rlc0lkcyA9IHVudmlzaXRlZE5vZGVzSWRzLmZpbHRlcigoaWQpID0+IGlkICE9PSBjdXJyTm9kZS5pZCk7XG5cbiAgICBpZiAoaXNTYW1lTm9kZShjdXJyTm9kZSwgZW5kKSkge1xuICAgICAgZm91bmRFbmQgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5laWdoYm9ycyA9IGdldE5laWdoYm9yc0lkcyhcbiAgICAgIHVudmlzaXRlZE5vZGVzSWRzLFxuICAgICAgbm9kZXMsXG4gICAgICBjdXJyTm9kZS54LFxuICAgICAgY3Vyck5vZGUueVxuICAgICk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5laWdoYm9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgYXdhaXQgc2VhcmNoKG5vZGVzW25laWdoYm9yc1tpXV0sIGN1cnJOb2RlLmlkKTtcbiAgICB9XG4gIH07XG5cbiAgYXdhaXQgc2VhcmNoKG5vZGVzW2Ake3N0YXJ0Lnh9LSR7c3RhcnQueX1gXSk7XG5cbiAgLy8gd2hpbGUgKHVudmlzaXRlZE5vZGVzSWRzLmxlbmd0aCkge1xuICAvLyAgIGNvbnN0IGN1cnJOb2RlID0gZ2V0Q2xvc2VzdE5vZGUodW52aXNpdGVkTm9kZXNJZHMsIG5vZGVzKTtcbiAgLy8gICAvLyBWSVNVQUxJWkVcbiAgLy8gICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjdXJyTm9kZS5pZCkuY2xhc3NMaXN0LmFkZChcInZpc2l0ZWRcIik7XG4gIC8vICAgYXdhaXQgYXN5bmNEZWxheShzcGVlZCk7XG5cbiAgLy8gICBpZiAoIWN1cnJOb2RlKSB7XG4gIC8vICAgICBicmVhaztcbiAgLy8gICB9XG5cbiAgLy8gICB2aXNpdGVkTm9kZXNbY3Vyck5vZGUuaWRdID0gY3Vyck5vZGU7XG5cbiAgLy8gICBpZiAoaXNTYW1lTm9kZShjdXJyTm9kZSwgZW5kKSkge1xuICAvLyAgICAgZm91bmRFbmQgPSB0cnVlO1xuICAvLyAgICAgYnJlYWs7XG4gIC8vICAgfVxuXG4gIC8vICAgZ2V0TmVpZ2hib3JzSWRzKG5vZGVzLCBjdXJyTm9kZS54LCBjdXJyTm9kZS55KS5mb3JFYWNoKChuZWlnaGJvcklkKSA9PiB7XG4gIC8vICAgICBjb25zdCBpc05laWdoYm9yRnVydGhlckZyb21TdGFydCA9IGN1cnJOb2RlLmRpc3QgPCBub2Rlc1tuZWlnaGJvcklkXS5kaXN0O1xuXG4gIC8vICAgICBpZiAoaXNOZWlnaGJvckZ1cnRoZXJGcm9tU3RhcnQpIHtcbiAgLy8gICAgICAgbm9kZXNbbmVpZ2hib3JJZF0uZGlzdCA9IGN1cnJOb2RlLmRpc3QgKyAxO1xuICAvLyAgICAgICBub2Rlc1tuZWlnaGJvcklkXS5wcmV2SWQgPSBjdXJyTm9kZS5pZDtcbiAgLy8gICAgIH1cblxuICAvLyAgICAgLy8gVklTVUFMSVpFXG4gIC8vICAgICBkb2N1bWVudFxuICAvLyAgICAgICAuZ2V0RWxlbWVudEJ5SWQobm9kZXNbbmVpZ2hib3JJZF0uaWQpXG4gIC8vICAgICAgIC5jbGFzc0xpc3QucmVwbGFjZShcInVudmlzaXRlZFwiLCBcIm5laWdoYm9yXCIpO1xuICAvLyAgIH0pO1xuICAvLyB9XG4gIGNvbnNvbGUubG9nKHZpc2l0ZWROb2Rlcyk7XG4gIGlmIChmb3VuZEVuZCkge1xuICAgIHZpc3VhbGl6ZVBhdGgodmlzaXRlZE5vZGVzLCBzdGFydCwgZW5kLCBzcGVlZCk7XG4gIH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9