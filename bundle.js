!function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=3)}([function(t,e,s){var i=s(1),n=s(2);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[t.i,n,""]]);var r={insert:"head",singleton:!1},a=(i(n,r),n.locals?n.locals:{});t.exports=a},function(t,e,s){"use strict";var i,n=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},r=function(){var t={};return function(e){if(void 0===t[e]){var s=document.querySelector(e);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(t){s=null}t[e]=s}return t[e]}}(),a=[];function d(t){for(var e=-1,s=0;s<a.length;s++)if(a[s].identifier===t){e=s;break}return e}function o(t,e){for(var s={},i=[],n=0;n<t.length;n++){var r=t[n],o=e.base?r[0]+e.base:r[0],l=s[o]||0,c="".concat(o," ").concat(l);s[o]=l+1;var h=d(c),u={css:r[1],media:r[2],sourceMap:r[3]};-1!==h?(a[h].references++,a[h].updater(u)):a.push({identifier:c,updater:v(u,e),references:1}),i.push(c)}return i}function l(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var n=s.nc;n&&(i.nonce=n)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var a=r(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var c,h=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function u(t,e,s,i){var n=s?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(t.styleSheet)t.styleSheet.cssText=h(e,n);else{var r=document.createTextNode(n),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(r,a[e]):t.appendChild(r)}}function f(t,e,s){var i=s.css,n=s.media,r=s.sourceMap;if(n?t.setAttribute("media",n):t.removeAttribute("media"),r&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var g=null,m=0;function v(t,e){var s,i,n;if(e.singleton){var r=m++;s=g||(g=l(e)),i=u.bind(null,s,r,!1),n=u.bind(null,s,r,!0)}else s=l(e),i=f.bind(null,s,e),n=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(s)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else n()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=n());var s=o(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var i=0;i<s.length;i++){var n=d(s[i]);a[n].references--}for(var r=o(t,e),l=0;l<s.length;l++){var c=d(s[l]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}s=r}}}},function(t,e,s){},function(t,e,s){"use strict";s.r(e);s(0);const i=(t,e,s,i)=>{const n=document.createElement("td");n.id=`${s}-${i}`,n.classList.add("unvisited"),n.style.width=e+"px",n.style.height=e+"px",n.dataset.x=s,n.dataset.y=i,t.appendChild(n)},n=(t,e)=>Math.floor(Math.random()*e)+t,r=(t,e,s)=>{let i;do{i=n(t,e)}while(i===s);return i},a={north:0,east:1,south:2,west:3},d=[0,1,2,1],o=[1,0,1,2],l=[2,1,0,1],c=[1,2,1,0],h=(t,e)=>{if(t.y<e.y&&t.x===e.x)return d[t.direction]+1;if(t.x<e.x&&t.y===e.y)return o[t.direction]+1;if(t.y>e.y&&t.x===e.x)return l[t.direction]+1;if(t.x>e.x&&t.y===e.y)return c[t.direction]+1;throw new Error("Something went wrong when setting the distance between nodes.")},u=(t,e)=>{if(t.y<e.y&&t.x===e.x)return a.north;if(t.x<e.x&&t.y===e.y)return a.east;if(t.y>e.y&&t.x===e.x)return a.south;if(t.x>e.x&&t.y===e.y)return a.west;throw new Error("Something went wrong when setting the direction of node.")},f=(t,e)=>{const s=Math.abs(t.x-e.x),i=Math.abs(t.y-e.y);let n=0;const r=0===(a=t.direction)?d:1===a?o:2===a?l:3===a?c:void 0;var a;return t.y<e.y?(n+=r[0],t.x<e.x?n+=r[1]:t.x>e.x&&(n+=r[3])):t.y>e.y&&(n+=r[2],t.x<e.x?n+=r[1]:t.x>e.x&&(n+=r[3])),s+i+n};var g=(t,e)=>{for(let s of Object.keys(t))for(let i of Object.keys(e))s===i&&(t[s]=e[i])};var m=class{constructor({status:t,x:e,y:s,prevId:i,dist:n}){this.status=t,this.id=`${e}-${s}`,this.x=e,this.y=s,this.prevId=i,this.dist=n}};var v=class extends m{constructor({direction:t,...e}){super(e),this.direction=t}};var y=class extends v{constructor({heuristicDistance:t,...e}){super(e),this.heuristicDistance=t}};const p="NORMAL",E="WEIGHTED",b="HEURISTIC",N="block",w="start",I="end",x="wall";var S=class{static createNode(t,e){switch(t){case p:return new m(e);case E:return new v(e);case b:return new y(e);default:return new m(e)}}};const L=(t,e,s)=>S.createNode(s.node.type,{x:t,y:e,...s.node.initialValues}),k=t=>t.status===N,$=t=>t.status===w,B="nav-algorithm-js",D="blocked",M="active",A="wall",O="unvisited",C="nav",j="startBtn",T="clearBtn",P=(t,...e)=>t.classList.contains(e),z=(t,...e)=>t.classList.remove(e),W=(t,...e)=>t.classList.add(e);function _(){}(_=t=>document.querySelector(t)).all=t=>document.querySelectorAll(t);var q=class{static addNavEventListeners(t){_.all("."+B).forEach(e=>{e.addEventListener("click",e=>{t(e)})})}static addStartBtnEventListener(t){_("#"+j).addEventListener("click",async e=>{t(e)})}static addClearBtnEventListener(t){_("#"+T).addEventListener("click",e=>{t(e)})}static addBlocksEventListeners(t){_.all("."+O).forEach(e=>{e.addEventListener("mousedown",e=>{e.preventDefault(),t.handleMouseDownOnBlock(e.target)}),e.addEventListener("mouseenter",e=>{e.preventDefault(),t.handleMouseEnterOnBlock(e.target)}),e.addEventListener("mouseup",e=>{e.preventDefault(),t.handleMouseUpOnBlock(e.target)}),e.addEventListener("mouseleave",e=>{e.preventDefault(),t.handleMouseLeaveOnBlock(e.target)})})}};var U=class{constructor({boardId:t,blockSize:e,speed:s,algorithms:i,initialAlgorithm:n}){this.boardId=t,this.blockSize=e,this.width=null,this.height=null,this.nodes={},this.startNode=null,this.startDirection="east",this.endNode=null,this.isNodeDragged=!1,this.isSearching=!1,this.isPrepared=!1,this.isMakingWalls=!1,this.isNodeDragged=!1,this.draggedNodeId=null,this.speed=s||10,this.algorithms=i||null,this.currentAlgorithm=n||null}initialize(){this.createNav(),this.calculateBoardSize(),this.createBoard(),this.createStartNode(),this.createEndNode(),this.setInitialActiveNavAlgorithm(),this.addNavAlgoElemsEventListeners(),this.addBlocksEventListeners(),this.addBtnsEventListeners(),q.addNavEventListeners(this.handleNavItemOnClick.bind(this)),console.log(this),this.isPrepared=!0}handleNavItemOnClick(t){const e=t.target;P(e,D)||(_.all("."+B).forEach(t=>z(t,M)),W(e,M),this.setCurrentAlgorithm(e.dataset.algorithmKey),this.resetNodes())}calculateBoardSize(){const t=document.getElementById(this.boardId),e=t.clientWidth,s=t.clientHeight;this.width=Math.floor(e/this.blockSize),this.height=Math.floor(s/this.blockSize)}createBoard(){const t=document.getElementById(this.boardId),e=document.createElement("tbody");for(let t=this.height-1;t>=0;t--){const s=document.createElement("tr");for(let e=0;e<this.width;e++)i(s,this.blockSize,e,t),this.nodes[`${e}-${t}`]=L(e,t,this.currentAlgorithm);e.appendChild(s)}t.appendChild(e)}createNav(){const t=document.getElementById(C);for(let[e,s]of Object.entries(this.algorithms)){const i=document.createElement("div");W(i,B),i.innerText=s.name,i.dataset.algorithmKey=e,t.appendChild(i)}}setInitialActiveNavAlgorithm(){document.querySelectorAll("."+B)[0].classList.add(M)}createStartNode(){const t=`${n(0,this.width-1)}-${n(0,this.height-1)}`;this.setStartNode(t);const e=document.getElementById(this.startNode.id);W(e,w),this.startDirection&&W(e,this.startDirection)}createEndNode(){const t=`${r(0,this.width-1,this.startNode.x)}-${r(0,this.height-1,this.startNode.y)}`;this.setEndNode(t);const e=document.getElementById(this.endNode.id);W(e,I)}setStartNode(t){g(this.nodes[t],{status:w,dist:0,direction:this.startDirection?a[this.startDirection]:null}),this.startNode=this.nodes[t]}setEndNode(t){g(this.nodes[t],{status:I,dist:1/0}),this.endNode=this.nodes[t]}resetNodeToInitial(t){g(this.nodes[t],this.currentAlgorithm.node.initialValues)}addNavAlgoElemsEventListeners(){const t=document.querySelectorAll("."+B);t.forEach(e=>{e.addEventListener("click",e=>{P(e.target,D)||(t.forEach(t=>t.classList.remove(M)),e.target.classList.add(M),this.setCurrentAlgorithm(e.target.dataset.algorithmKey),this.resetNodes())})})}addBtnsEventListeners(){const t=document.getElementById(j),e=document.getElementById(T);t.addEventListener("click",t=>this.handleStart(t)),e.addEventListener("click",t=>this.handleClear(t))}addBlocksEventListeners(){document.querySelectorAll("."+O).forEach(t=>{t.addEventListener("mousedown",e=>{e.preventDefault(),this.handleMouseDown(t)}),t.addEventListener("mouseenter",e=>{e.preventDefault(),this.handleMouseEnter(t)}),t.addEventListener("mouseup",e=>{e.preventDefault(),this.handleMouseUp(t)}),t.addEventListener("mouseleave",e=>{e.preventDefault(),this.handleMouseLeave(t)})})}async handleStart(t){this.isPrepared&&(this.handleIsSearchingState(!0),this.handleIsPreparedState(!1),await this.currentAlgorithm.func(this.nodes,this.startNode,this.endNode,this.speed),this.handleIsSearchingState(!1))}handleClear(t){this.isSearching||(this.clearBoard(),this.handleIsPreparedState(!0))}handleMouseDown(t){const e=t.id;k(this.nodes[e])?!this.isNodeDragged&&k(this.nodes[e])&&(this.createWall(t),this.isMakingWalls=!0):(this.draggedNodeId=e,this.isNodeDragged=!0)}handleMouseEnter(t){const e=t.id;if(this.isNodeDragged&&k(this.nodes[e])){const e=this.nodes[this.draggedNodeId],s=e.status;if(W(t,s),$(e)){const e=this.startDirection?this.startDirection:"";W(t,e)}}else this.isMakingWalls&&k(this.nodes[e])&&this.createWall(t)}handleMouseUp(t){const e=t.id;if(this.isNodeDragged&&this.nodes[e].status!==x&&this.draggedNodeId!==e){const t=this.nodes[this.draggedNodeId];$(t)?this.setStartNode(e):(t=>t.status===I)(t)&&this.setEndNode(e),this.resetNodeToInitial(this.draggedNodeId),this.isNodeDragged=!1,this.draggedNodeId=null}else this.isMakingWalls=!1}handleMouseLeave(t){if(this.isNodeDragged){const e=this.nodes[this.draggedNodeId];if(z(t,e.status),$(e)){const e=this.startDirection?this.startDirection:"";z(t,e)}}}createWall(t){W(t,A)}setCurrentAlgorithm(t){this.currentAlgorithm=t?this.algorithms[t]:null}handleIsSearchingState(t){this.isSearching=t,document.getElementById(T).disabled=t}handleIsPreparedState(t){this.isPrepared=t,document.getElementById(j).disabled=!t}clearBoard(){for(let t=this.height-1;t>=0;t--)for(let e=0;e<this.width;e++){const s=`${e}-${t}`;this.resetNodeToInitial(s),document.getElementById(`${e}-${t}`).classList=[],document.getElementById(`${e}-${t}`).classList.add(O)}this.createStartNode(),this.createEndNode()}resetNodes(){const t=this.startNode.id,e=this.endNode.id;this.nodes={};for(let t=this.height-1;t>=0;t--)for(let e=0;e<this.width;e++){const s=`${e}-${t}`;this.nodes[s]=L(e,t,this.currentAlgorithm)}this.setStartNode(t),this.setEndNode(e)}};const V=(t,e,s,i)=>{let n=[];return e[`${s}-${i+1}`]&&!document.getElementById(`${s}-${i+1}`).classList.contains("wall")&&n.push(`${s}-${i+1}`),e[`${s+1}-${i}`]&&!document.getElementById(`${s+1}-${i}`).classList.contains("wall")&&n.push(`${s+1}-${i}`),e[`${s}-${i-1}`]&&!document.getElementById(`${s}-${i-1}`).classList.contains("wall")&&n.push(`${s}-${i-1}`),e[`${s-1}-${i}`]&&!document.getElementById(`${s-1}-${i}`).classList.contains("wall")&&n.push(`${s-1}-${i}`),n.filter(e=>t.find(t=>e===t))};var H=t=>new Promise(e=>setTimeout(e,t));const F=async(t,e)=>{document.getElementById(t).classList.remove("unvisited"),document.getElementById(t).classList.remove("neighbor"),document.getElementById(t).classList.add("visited"),await H(e/5)},R=async(t,e)=>{document.getElementById(t).classList.add("neighbor"),await H(e/5)},K=async(t,e,s,i)=>{let n=[],r=!1,a=t[`${s.x}-${s.y}`];for(n.push(a.id);!r;){if(a.x===e.x&&a.y===e.y){r=!0;break}n.push(a.prevId),a=t[a.prevId]}for(let t=n.length-1;t>=0;t--)document.getElementById(n[t]).classList.add("path"),await H(i)},G=(t,e)=>{let s=1/0,i=0,n=0;return t.forEach((t,r)=>{e[t]&&e[t].dist<s&&(s=e[t].dist,i=t,n=r)}),t.splice(n,1),e[i]},J=(t,e)=>{let s=1/0,i=0,n=0;return t.forEach((t,r)=>{if(e[t]&&e[t].dist!==1/0){const a=e[t].dist+e[t].heuristicDistance;a<s&&(s=a,i=t,n=r)}}),t.splice(n,1),e[i]},Q=(t,e)=>t.x===e.x&&t.y===e.y,X=async(t,e)=>{const s=t.length;for(let i=0;i<s;i++)await e(t[i],i,t)},Y={bfs:{name:"Breadth-First Search",func:async(t,e,s,i)=>{let n=Object.keys(t),r={},a=!1;for(;n.length;){const e=G(n,t);if(!e)break;if(await F(e.id,i),r[e.id]=e,Q(e,s)){a=!0;break}const d=V(n,t,e.x,e.y);await X(d,s=>{e.dist<t[s].dist&&(R(s,i),t[s].dist=e.dist+1,t[s].prevId=e.id)})}a&&K(r,e,s,i)},node:{type:p,initialValues:{status:"block",prevId:null,dist:1/0}}},dfs:{name:"Depth-First Search",func:async(t,e,s,i)=>{let n=Object.keys(t),r={},a=!1;const d=async(e,i)=>{if(!e)return;if(a)return;if(await F(e.id),e.prevId=i,r[e.id]=e,n=n.filter(t=>t!==e.id),Q(e,s))return void(a=!0);const o=V(n,t,e.x,e.y);await X(o,s=>d(t[s],e.id))};await d(t[e.id]),a&&K(r,e,s,i)},node:{type:p,initialValues:{status:"block",prevId:null,dist:1/0}}},dijkstra:{name:"Dijkstra",func:async(t,e,s,i)=>{let n=Object.keys(t),r={},a=!1;for(;n.length;){const e=G(n,t);if(!e)break;if(await F(e.id,i),r[e.id]=e,Q(e,s)){a=!0;break}V(n,t,e.x,e.y).forEach(s=>{const i=h(e,t[s]);e.dist+i<t[s].dist&&(R(s),t[s].dist=e.dist+i,t[s].prevId=e.id,t[s].direction=u(e,t[s]))})}a&&K(r,e,s,i)},node:{type:E,initialValues:{status:"block",prevId:null,dist:1/0,direction:null}}},astar:{name:"A* Search",func:async(t,e,s,i)=>{let n=Object.keys(t),r={},a=!1;for(t[e.id].heuristicDistance=f(e,s);n.length;){const e=J(n,t);if(!e)break;if(await F(e.id,i),r[e.id]=e,Q(e,s)){a=!0;break}const d=V(n,t,e.x,e.y);await X(d,async n=>{const r=h(e,t[n]);e.dist+r<t[n].dist&&(await R(n,i),t[n].dist=e.dist+r,t[n].direction=u(e,t[n]),t[n].heuristicDistance=f(t[n],s),t[n].prevId=e.id)})}a&&K(r,e,s,i)},node:{type:b,initialValues:{status:"block",prevId:null,dist:1/0,direction:null,heuristicDistance:null}}}};new U({boardId:"board",blockSize:25,speed:40,algorithms:Y,initialAlgorithm:Y.bfs}).initialize()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,