!function(t){var e={};function s(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,s),a.l=!0,a.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)s.d(i,a,function(e){return t[e]}.bind(null,a));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=3)}([function(t,e,s){var i=s(1),a=s(2);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var r={insert:"head",singleton:!1},n=(i(a,r),a.locals?a.locals:{});t.exports=n},function(t,e,s){"use strict";var i,a=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},r=function(){var t={};return function(e){if(void 0===t[e]){var s=document.querySelector(e);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(t){s=null}t[e]=s}return t[e]}}(),n=[];function d(t){for(var e=-1,s=0;s<n.length;s++)if(n[s].identifier===t){e=s;break}return e}function o(t,e){for(var s={},i=[],a=0;a<t.length;a++){var r=t[a],o=e.base?r[0]+e.base:r[0],l=s[o]||0,h="".concat(o," ").concat(l);s[o]=l+1;var c=d(h),u={css:r[1],media:r[2],sourceMap:r[3]};-1!==c?(n[c].references++,n[c].updater(u)):n.push({identifier:h,updater:m(u,e),references:1}),i.push(h)}return i}function l(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var a=s.nc;a&&(i.nonce=a)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var n=r(t.insert||"head");if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(e)}return e}var h,c=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function u(t,e,s,i){var a=s?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(t.styleSheet)t.styleSheet.cssText=c(e,a);else{var r=document.createTextNode(a),n=t.childNodes;n[e]&&t.removeChild(n[e]),n.length?t.insertBefore(r,n[e]):t.appendChild(r)}}function f(t,e,s){var i=s.css,a=s.media,r=s.sourceMap;if(a?t.setAttribute("media",a):t.removeAttribute("media"),r&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var p=null,v=0;function m(t,e){var s,i,a;if(e.singleton){var r=v++;s=p||(p=l(e)),i=u.bind(null,s,r,!1),a=u.bind(null,s,r,!0)}else s=l(e),i=f.bind(null,s,e),a=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(s)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else a()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=a());var s=o(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var i=0;i<s.length;i++){var a=d(s[i]);n[a].references--}for(var r=o(t,e),l=0;l<s.length;l++){var h=d(s[l]);0===n[h].references&&(n[h].updater(),n.splice(h,1))}s=r}}}},function(t,e,s){},function(t,e,s){"use strict";s.r(e);s(0);const i="block",a="nav-algorithm-js",r="blocked",n="active",d="start",o="end",l="wall",h="visited",c="unvisited",u="neighbor",f="path",p="nav",v="startBtn",m="clearBtn",g="clearWallsBtn",y="speedVal",N="delayed",S="instant",b=(t,...e)=>t.classList.contains(e),E=(t,...e)=>t.classList.add(e);function x(){}(x=t=>document.querySelector(t)).all=t=>document.querySelectorAll(t),x.id=t=>document.getElementById(t);const w=(t,e,s,a)=>{const r=document.createElement("td");r.id=`${s}-${a}`,r.classList.add("unvisited"),r.className=`${i} ${c}`,r.style.width=e+"px",r.style.height=e+"px",r.dataset.x=s,r.dataset.y=a,t.appendChild(r)},L=t=>{x.id(t).className=`${i} ${c}`},I=(t,e)=>{const s=x.id(t);s.className=`${i} ${d}`,e&&s.classList.add(e)},D=t=>{x.id(t).className=`${i} ${o}`},$=(t,e)=>Math.floor(Math.random()*e)+t,k=(t,e,s)=>{let i;do{i=$(t,e)}while(i===s);return i};var B=(t,e)=>{for(let s of Object.keys(t))for(let i of Object.keys(e))s===i&&(t[s]=e[i])};var M=class{constructor({status:t,x:e,y:s,prevId:i,dist:a}){this.status=t,this.id=`${e}-${s}`,this.x=e,this.y=s,this.prevId=i,this.dist=a}};var A=class extends M{constructor({direction:t,...e}){super(e),this.direction=t}};var C=class extends A{constructor({heuristicDistance:t,...e}){super(e),this.heuristicDistance=t}};const O="NORMAL",T="WEIGHTED",j="HEURISTIC",W="start",P="end",z="wall",F="visited",_="unvisited",V="neighbor";var q=class{static createNode(t,e){switch(t){case O:return new M(e);case T:return new A(e);case j:return new C(e);default:return new M(e)}}};const U=(t,e,s)=>q.createNode(s.node.type,{x:t,y:e,...s.node.initialValues}),H=t=>t.status===_,R=t=>t.status===z,K={north:0,east:1,south:2,west:3},G=[0,1,2,1],J=[1,0,1,2],Q=[2,1,0,1],X=[1,2,1,0],Y=(t,e)=>{if(t.y<e.y&&t.x===e.x)return G[t.direction]+1;if(t.x<e.x&&t.y===e.y)return J[t.direction]+1;if(t.y>e.y&&t.x===e.x)return Q[t.direction]+1;if(t.x>e.x&&t.y===e.y)return X[t.direction]+1;throw new Error("Something went wrong when setting the distance between nodes.")},Z=(t,e)=>{if(t.y<e.y&&t.x===e.x)return K.north;if(t.x<e.x&&t.y===e.y)return K.east;if(t.y>e.y&&t.x===e.x)return K.south;if(t.x>e.x&&t.y===e.y)return K.west;throw new Error("Something went wrong when setting the direction of node.")},tt=(t,e)=>{const s=Math.abs(t.x-e.x),i=Math.abs(t.y-e.y);let a=0;const r=0===(n=t.direction)?G:1===n?J:2===n?Q:3===n?X:void 0;var n;return t.y<e.y?(a+=r[0],t.x<e.x?a+=r[1]:t.x>e.x&&(a+=r[3])):t.y>e.y&&(a+=r[2],t.x<e.x?a+=r[1]:t.x>e.x&&(a+=r[3])),s+i+a};var et=class{static addNavEventListeners(t){x.all("."+a).forEach(e=>{e.addEventListener("click",e=>{t(e)})})}static addStartBtnEventListener(t){x("#"+v).addEventListener("click",async e=>{t(e)})}static addClearBtnEventListener(t){x("#"+m).addEventListener("click",e=>{t(e)})}static addBlocksEventListeners(t){x.all("."+c).forEach(e=>{e.addEventListener("mousedown",e=>{e.preventDefault(),t.handleMouseDownOnBlock(e.target)}),e.addEventListener("mouseenter",e=>{e.preventDefault(),t.handleMouseEnterOnBlock(e.target)}),e.addEventListener("mouseup",e=>{e.preventDefault(),t.handleMouseUpOnBlock(e.target)}),e.addEventListener("mouseleave",e=>{e.preventDefault(),t.handleMouseLeaveOnBlock(e.target)})})}};const st=async(t,e)=>{const s=t.length;for(let i=0;i<s;i++)await e(t[i],i,t)};var it=t=>new Promise(e=>setTimeout(e,t));var at=class{constructor(t){this.delay=t,this.minDelay=20,this.maxDelay=100,this.prepareSpeedInput()}async run(t,e,s){s===N?await this.runDelayed(t,e):s===S&&this.runInstant(t,e)}async runDelayed(t,e){await st(t,async t=>{const e=x.id(t.id);e.classList.remove(c),t.status===F?(e.classList.add(h),await it(this.delay/5)):t.status===V&&(e.classList.add(u),await it(this.delay/5))}),await st(e,async t=>{x.id(t.id).classList.add(f),await it(this.delay)})}runInstant(t,e){t.forEach(t=>{const e=x.id(t.id);e.classList.remove(c),t.status===F?e.classList.add("instant-"+h):t.status===V&&e.classList.add("instant-"+u)}),e.forEach(t=>{x.id(t.id).classList.add("instant-"+f)})}prepareSpeedInput(){const t=x.id(y);t.min=this.minDelay,t.max=this.maxDelay,t.value=this.delay,t.style.direction="rtl",t.addEventListener("change",t=>{this.delay=t.target.value})}};const rt=(t,e,s,i)=>{let a=[];return e[`${s}-${i+1}`]&&!R(e[`${s}-${i+1}`])&&a.push(`${s}-${i+1}`),e[`${s+1}-${i}`]&&!R(e[`${s+1}-${i}`])&&a.push(`${s+1}-${i}`),e[`${s}-${i-1}`]&&!R(e[`${s}-${i-1}`])&&a.push(`${s}-${i-1}`),e[`${s-1}-${i}`]&&!R(e[`${s-1}-${i}`])&&a.push(`${s-1}-${i}`),a.filter(e=>t.find(t=>e===t))},nt=(t,e)=>{let s=1/0,i=0,a=0;return t.forEach((t,r)=>{e[t]&&e[t].dist<s&&(s=e[t].dist,i=t,a=r)}),t.splice(a,1),e[i]},dt=(t,e)=>{let s=1/0,i=0,a=0;return t.forEach((t,r)=>{if(e[t]&&e[t].dist!==1/0){const n=e[t].dist+e[t].heuristicDistance;n<s&&(s=n,i=t,a=r)}}),t.splice(a,1),e[i]},ot=(t,e)=>t.x===e.x&&t.y===e.y,lt=(t,e,s,i)=>{let a=[];if(i){let i=!1,r=t[s.id];for(a.push(r);!i;){if(a.push(r),r.x===e.x&&r.y===e.y){i=!0;break}r.prevId&&(r=t[r.prevId])}}return a.reverse()},ht={bfs:{name:"Breadth-First Search",func:(t,e,s)=>{let i=Object.keys(t),a={},r=[],n=!1;for(;i.length;){const e=nt(i,t);if(!e)break;if(e.status=F,a[e.id]=e,r.push(e),ot(e,s)){n=!0;break}rt(i,t,e.x,e.y).forEach(s=>{a[s]=t[s],t[s].status=V,r.push(t[s]),e.dist<t[s].dist&&(t[s].dist=e.dist+1,t[s].prevId=e.id)})}return[r,lt(a,e,s,n)]},node:{type:O,initialValues:{status:_,prevId:null,dist:1/0}}},dfs:{name:"Depth-First Search",func:(t,e,s,i)=>{let a=Object.keys(t),r={},n=[],d=!1;const o=(e,i)=>{if(!e)return;if(d)return;if(e.prevId=i,e.status=F,r[e.id]=e,n.push(e),a=a.filter(t=>t!==e.id),ot(e,s))return void(d=!0);rt(a,t,e.x,e.y).forEach(s=>o(t[s],e.id))};return o(t[e.id]),[n,lt(r,e,s,d)]},node:{type:O,initialValues:{status:_,prevId:null,dist:1/0}}},dijkstra:{name:"Dijkstra",func:async(t,e,s,i)=>{let a=Object.keys(t),r={},n=[],d=!1;for(;a.length;){const e=nt(a,t);if(!e)break;if(e.status=F,r[e.id]=e,n.push(e),ot(e,s)){d=!0;break}rt(a,t,e.x,e.y).forEach(s=>{r[s]=t[s],t[s].status=V,n.push(t[s]);const i=Y(e,t[s]);e.dist+i<t[s].dist&&(t[s].dist=e.dist+i,t[s].prevId=e.id,t[s].direction=Z(e,t[s]))})}return[n,lt(r,e,s,d)]},node:{type:T,initialValues:{status:_,prevId:null,dist:1/0,direction:null}}},astar:{name:"A* Search",func:(t,e,s)=>{let i=Object.keys(t),a={},r=[],n=!1;for(t[e.id].heuristicDistance=tt(e,s);i.length;){const e=dt(i,t);if(!e)break;if(e.status=F,a[e.id]=e,r.push(e),ot(e,s)){n=!0;break}rt(i,t,e.x,e.y).forEach(i=>{a[i]=t[i],t[i].status=V,r.push(t[i]);const n=Y(e,t[i]);e.dist+n<t[i].dist&&(t[i].dist=e.dist+n,t[i].direction=Z(e,t[i]),t[i].heuristicDistance=tt(t[i],s),t[i].prevId=e.id)})}return[r,lt(a,e,s,n)]},node:{type:j,initialValues:{status:_,prevId:null,dist:1/0,direction:null,heuristicDistance:null}}}};new class{constructor({boardId:t,blockSize:e,delay:s,algorithms:i,initialAlgorithm:a,initialStartDirection:r}){this.boardId=t,this.blockSize=e,this.width=null,this.height=null,this.nodes={},this.startNode=null,this.startDirection=r,this.endNode=null,this.isSearching=!1,this.isPrepared=!1,this.isSearched=!1,this.isMakingWalls=!1,this.isNodeDragged=!1,this.draggedNodeId=null,this.algorithms=i||null,this.currentAlgorithm=a||null,this.visualizer=new at(s),this.animationType=N}initialize(){this.createNav(),this.calculateBoardSize(),this.createBoard(),this.createStartNode(),this.createEndNode(),this.setInitialActiveNavAlgorithm(),this.addNavAlgoElemsEventListeners(),this.addBlocksEventListeners(),this.addBtnsEventListeners(),et.addNavEventListeners(this.handleNavItemOnClick.bind(this)),this.isPrepared=!0}handleNavItemOnClick(t){const e=t.target;b(e,r)||(x.all("."+a).forEach(t=>((t,...e)=>t.classList.remove(e))(t,n)),E(e,n),this.setCurrentAlgorithm(e.dataset.algorithmKey),this.recreateNodes())}calculateBoardSize(){const t=x.id(this.boardId),e=t.clientWidth,s=t.clientHeight;this.width=Math.floor(e/this.blockSize),this.height=Math.floor(s/this.blockSize)}createBoard(){const t=x.id(this.boardId),e=document.createElement("tbody");for(let t=this.height-1;t>=0;t--){const s=document.createElement("tr");for(let e=0;e<this.width;e++)w(s,this.blockSize,e,t),this.nodes[`${e}-${t}`]=U(e,t,this.currentAlgorithm);e.appendChild(s)}t.appendChild(e)}createNav(){const t=x.id(p);for(let[e,s]of Object.entries(this.algorithms)){const i=document.createElement("div");E(i,a),i.innerText=s.name,i.dataset.algorithmKey=e,t.appendChild(i)}}setInitialActiveNavAlgorithm(){document.querySelectorAll("."+a)[0].classList.add(n)}createStartNode(){const t=`${$(0,this.width-1)}-${$(0,this.height-1)}`;this.setStartNode(t),I(t,this.startDirection)}createEndNode(){const t=`${k(0,this.width-1,this.startNode.x)}-${k(0,this.height-1,this.startNode.y)}`;this.setEndNode(t),D(t)}setStartNode(t){B(this.nodes[t],{status:W,dist:0,direction:this.startDirection?K[this.startDirection]:null}),this.startNode=this.nodes[t]}setEndNode(t){B(this.nodes[t],{status:P,dist:1/0}),this.endNode=this.nodes[t]}setNodeToInitial(t){B(this.nodes[t],this.currentAlgorithm.node.initialValues)}addNavAlgoElemsEventListeners(){const t=document.querySelectorAll("."+a);t.forEach(e=>{e.addEventListener("click",e=>{b(e.target,r)||(t.forEach(t=>t.classList.remove(n)),e.target.classList.add(n),this.setCurrentAlgorithm(e.target.dataset.algorithmKey),this.resetNodesExpectWalls(),this.setStartNode(this.startNode.id),this.setEndNode(this.endNode.id))})})}addBtnsEventListeners(){const t=x.id(v),e=x.id(m),s=x.id(g);t.addEventListener("click",t=>this.handleDelayedStart()),e.addEventListener("click",t=>this.handleClear()),s.addEventListener("click",t=>this.handleClearWalls())}addBlocksEventListeners(){document.querySelectorAll("."+i).forEach(t=>{t.addEventListener("mousedown",e=>{1===e.which&&(e.preventDefault(),this.handleMouseDown(t))}),t.addEventListener("mouseenter",e=>{e.preventDefault(),this.handleMouseEnter(t)}),t.addEventListener("mouseup",e=>{e.preventDefault(),this.handleMouseUp(t)}),t.addEventListener("mouseleave",e=>{e.preventDefault(),this.handleMouseLeave(t)})})}handleDelayedStart(){this.prepareDelayedSearchStateStart(),this.animationType=N,this.handleStart()}handleInstantStart(){this.prepareInstantSearchStateStart(),this.animationType=S,this.handleStart()}async handleStart(){if(this.isPrepared){this.handleSearchStateStart();const[t,e]=await this.currentAlgorithm.func(this.nodes,this.startNode,this.endNode);await this.visualizer.run(t,e,this.animationType),this.handleSearchStateEnd()}}handleClear(t){this.isSearching||(this.resetNodesAll(),this.clearBoardAll(),this.createStartNode(),this.createEndNode(),this.isPrepared=!0,this.isSearched=!1,this.isSearching=!1)}handleClearWalls(){this.isSearching||(this.clearNodesFromWalls(),this.clearBoardFromWalls())}handleSearchStateStart(){this.isSearching=!0,this.isPrepared=!1,this.isSearched=!1,x.id(m).disabled=!0,x.id(g).disabled=!0,x.id(v).disabled=!0}handleSearchStateEnd(){this.resetNodesExpectWalls(),this.setStartNode(this.startNode.id),this.setEndNode(this.endNode.id),this.isSearching=!1,this.isPrepared=!0,this.isSearched=!0,x.id(m).disabled=!1,x.id(g).disabled=!1,x.id(v).disabled=!1}prepareDelayedSearchStateStart(){this.clearBoardFromNodes(),I(this.startNode.id,this.startDirection),D(this.endNode.id),this.isPrepared=!0}prepareInstantSearchStateStart(){this.clearBoardFromNodes(),I(this.startNode.id),D(this.endNode.id),this.isPrepared=!0}handleMouseDown(t){const e=t.id;H(this.nodes[e])||R(this.nodes[e])||this.isSearching?!this.isNodeDragged&&H(this.nodes[e])&&(this.createWall(t),this.isMakingWalls=!0):(this.draggedNodeId=e,this.isNodeDragged=!0)}handleMouseEnter(t){const e=t.id;this.isNodeDragged&&H(this.nodes[e])?(this.nodes[this.draggedNodeId].status===W?(this.setStartNode(e),I(e,this.startDirection)):(t=>t.status===P)(this.nodes[this.draggedNodeId])&&(this.setEndNode(e),D(e)),this.setNodeToInitial(this.draggedNodeId),this.draggedNodeId=e,this.isSearched&&this.handleInstantStart()):this.isMakingWalls&&H(this.nodes[e])&&this.createWall(t)}handleMouseUp(t){const e=t.id;this.isNodeDragged&&!R(this.nodes[e])?(this.isNodeDragged=!1,this.draggedNodeId=null):this.isMakingWalls=!1}handleMouseLeave(t){this.isNodeDragged&&L(this.draggedNodeId)}createWall(t){var e;this.nodes[t.id].status=z,e=t.id,x.id(e).className=`${i} ${l}`}setCurrentAlgorithm(t){this.currentAlgorithm=t?this.algorithms[t]:null}clearBoardAll(){this.loopBoard(t=>L(t))}clearBoardFromNodes(){this.loopBoard(t=>{x.id(t).classList.contains(l)||L(t)})}clearBoardFromWalls(){this.loopBoard(t=>{x.id(t).classList.contains(l)&&L(t)})}resetNodesExpectWalls(){this.loopBoard(t=>{R(this.nodes[t])||this.setNodeToInitial(t)})}clearNodesFromWalls(){this.loopBoard((t,e,s)=>{R(this.nodes[t])&&this.setNodeToInitial(t)})}resetNodesAll(){this.setNodesToInitial()}setNodesToInitial(){this.loopBoard(t=>this.setNodeToInitial(t))}recreateNodes(){const t=this.startNode.id,e=this.endNode.id;this.loopBoard((t,e,s)=>{R(this.nodes[t])?(this.nodes[t]=U(e,s,this.currentAlgorithm),this.nodes[t].status=z):this.nodes[t]=U(e,s,this.currentAlgorithm)}),this.setStartNode(t),this.setEndNode(e)}loopBoard(t){for(let e=this.height-1;e>=0;e--)for(let s=0;s<this.width;s++)t(`${s}-${e}`,s,e)}}({boardId:"board",blockSize:25,delay:20,algorithms:ht,initialAlgorithm:ht.bfs,initialStartDirection:"east"}).initialize()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,