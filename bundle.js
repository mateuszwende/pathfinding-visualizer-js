!function(e){var t={};function s(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,s),a.l=!0,a.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)s.d(i,a,function(t){return e[t]}.bind(null,a));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=3)}([function(e,t,s){var i=s(1),a=s(2);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var n={insert:"head",singleton:!1},r=(i(a,n),a.locals?a.locals:{});e.exports=r},function(e,t,s){"use strict";var i,a=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},n=function(){var e={};return function(t){if(void 0===e[t]){var s=document.querySelector(t);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(e){s=null}e[t]=s}return e[t]}}(),r=[];function d(e){for(var t=-1,s=0;s<r.length;s++)if(r[s].identifier===e){t=s;break}return t}function o(e,t){for(var s={},i=[],a=0;a<e.length;a++){var n=e[a],o=t.base?n[0]+t.base:n[0],l=s[o]||0,h="".concat(o," ").concat(l);s[o]=l+1;var c=d(h),u={css:n[1],media:n[2],sourceMap:n[3]};-1!==c?(r[c].references++,r[c].updater(u)):r.push({identifier:h,updater:v(u,t),references:1}),i.push(h)}return i}function l(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var a=s.nc;a&&(i.nonce=a)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var r=n(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var h,c=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function u(e,t,s,i){var a=s?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=c(t,a);else{var n=document.createTextNode(a),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(n,r[t]):e.appendChild(n)}}function g(e,t,s){var i=s.css,a=s.media,n=s.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),n&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(n))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var f=null,p=0;function v(e,t){var s,i,a;if(t.singleton){var n=p++;s=f||(f=l(t)),i=u.bind(null,s,n,!1),a=u.bind(null,s,n,!0)}else s=l(t),i=g.bind(null,s,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(s)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var s=o(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<s.length;i++){var a=d(s[i]);r[a].references--}for(var n=o(e,t),l=0;l<s.length;l++){var h=d(s[l]);0===r[h].references&&(r[h].updater(),r.splice(h,1))}s=n}}}},function(e,t,s){},function(e,t,s){"use strict";s.r(t);s(0);const i="block",a="nav-algorithm-js",n="blocked",r="active",d="start",o="end",l="wall",h="visited",c="unvisited",u="neighbor",g="path",f="nav",p="startBtn",v="clearBtn",m="clearWallsBtn",N="speedVal",y="delayed",S="instant",b=(e,...t)=>e.classList.add(t);function M(){}(M=e=>document.querySelector(e)).all=e=>document.querySelectorAll(e),M.id=e=>document.getElementById(e);const E=(e,t,s,a)=>{const n=document.createElement("td");n.id=`${s}-${a}`,n.classList.add("unvisited"),n.className=`${i} ${c}`,n.style.width=t+"px",n.style.height=t+"px",n.dataset.x=s,n.dataset.y=a,e.appendChild(n)},x=e=>{M.id(e).className=`${i} ${c}`},w=(e,t)=>{const s=M.id(e);s.className=`${i} ${d}`,t&&s.classList.add(t)},D=e=>{M.id(e).className=`${i} ${o}`};var I=class{static addNavEventListeners(e){M.all("."+a).forEach(t=>{t.addEventListener("click",t=>{e(t)})})}static addStartBtnEventListener(e){M("#"+p).addEventListener("click",async t=>{e(t)})}static addClearBtnEventListener(e){M("#"+v).addEventListener("click",t=>{e(t)})}static addBlocksEventListeners(e){M.all("."+c).forEach(t=>{t.addEventListener("mousedown",t=>{t.preventDefault(),e.handleMouseDownOnBlock(t.target)}),t.addEventListener("mouseenter",t=>{t.preventDefault(),e.handleMouseEnterOnBlock(t.target)}),t.addEventListener("mouseup",t=>{t.preventDefault(),e.handleMouseUpOnBlock(t.target)}),t.addEventListener("mouseleave",t=>{t.preventDefault(),e.handleMouseLeaveOnBlock(t.target)})})}};const L=(e,t)=>Math.floor(Math.random()*t)+e,$=(e,t,s)=>{let i;do{i=L(e,t)}while(i===s);return i};var k=(e,t)=>{for(let s of Object.keys(e))for(let i of Object.keys(t))s===i&&(e[s]=t[i])};const A={north:0,east:1,south:2,west:3},B=[0,1,2,1],C=[1,0,1,2],T=[2,1,0,1],W=[1,2,1,0],O=(e,t)=>{if(e.y<t.y&&e.x===t.x)return B[e.direction]+1;if(e.x<t.x&&e.y===t.y)return C[e.direction]+1;if(e.y>t.y&&e.x===t.x)return T[e.direction]+1;if(e.x>t.x&&e.y===t.y)return W[e.direction]+1;throw new Error("Something went wrong when setting the distance between nodes.")},j=(e,t)=>{if(e.y<t.y&&e.x===t.x)return A.north;if(e.x<t.x&&e.y===t.y)return A.east;if(e.y>t.y&&e.x===t.x)return A.south;if(e.x>t.x&&e.y===t.y)return A.west;throw new Error("Something went wrong when setting the direction of node.")},z=(e,t)=>{const s=Math.abs(e.x-t.x),i=Math.abs(e.y-t.y);let a=0;const n=0===(r=e.direction)?B:1===r?C:2===r?T:3===r?W:void 0;var r;return e.y<t.y?(a+=n[0],e.x<t.x?a+=n[1]:e.x>t.x&&(a+=n[3])):e.y>t.y&&(a+=n[2],e.x<t.x?a+=n[1]:e.x>t.x&&(a+=n[3])),s+i+a},P="NORMAL",F="WEIGHTED",U="HEURISTIC",R="start",_="end",q="wall",V="visited",H="unvisited",X="neighbor";var Y=class{constructor({status:e,x:t,y:s,prevId:i,dist:a}){this.status=e,this.id=`${t}-${s}`,this.x=t,this.y=s,this.prevId=i,this.dist=a}};var K=class extends Y{constructor({direction:e,...t}){super(t),this.direction=e}};var G=class extends K{constructor({heuristicDistance:e,...t}){super(t),this.heuristicDistance=e}};var J=class{static createNode(e,t){switch(e){case P:return new Y(t);case F:return new K(t);case U:return new G(t);default:return new Y(t)}}};var Q=class{constructor(e,t,s,i){this.sizeX=e,this.sizeY=t,this.nodes={},this.currentAlgorithm=s,this.startNode=null,this.startDirection=i,this.endNode=null}createNodes(){this.loopNodes((e,t,s)=>{this.createNode(e,t,s)})}createNode(e,t,s){const i=J.createNode(this.currentAlgorithm.node.type,{x:t,y:s,...this.currentAlgorithm.node.initialValues});this.nodes[e]=i}setRandomStartNode(){const e=`${L(0,this.sizeX-1)}-${L(0,this.sizeY-1)}`;this.setStartNode(e)}setRandomEndNode(){const e=`${$(0,this.sizeX-1,this.startNode.x)}-${$(0,this.sizeY-1,this.startNode.y)}`;this.setEndNode(e)}setStartNode(e){k(this.nodes[e],{status:R,dist:0,direction:this.startDirection?A[this.startDirection]:null}),this.startNode=this.nodes[e]}setEndNode(e){k(this.nodes[e],{status:_,dist:1/0}),this.endNode=this.nodes[e]}setStartDirection(e){this.startDirection=e}setNodeToInitial(e){k(this.nodes[e],this.currentAlgorithm.node.initialValues)}setNodeToWall(e){this.nodes[e].status=q}resetNodesExpectWalls(){this.loopNodes(e=>{this.isNodeWall(e)||this.setNodeToInitial(e)})}clearNodesFromWalls(){this.loopNodes(e=>{this.isNodeWall(e)&&this.setNodeToInitial(e)})}resetNodesAll(){this.setNodesToInitial()}setNodesToInitial(){this.loopNodes(e=>this.setNodeToInitial(e))}retrieveStartNode(){this.setStartNode(this.startNode.id)}retrieveEndNode(){this.setEndNode(this.endNode.id)}recreateNodes(){this.loopNodes((e,t,s)=>{this.isNodeWall(e)?(this.createNode(e,t,s),this.setNodeToWall(e)):this.createNode(e,t,s)}),this.retrieveStartNode(),this.retrieveEndNode()}isNodeUnvisited(e){return this.nodes[e].status===H}isNodeWall(e){return this.nodes[e].status===q}isNodeStart(e){return this.nodes[e].status===R}isNodeEnd(e){return this.nodes[e].status===_}loopNodes(e){for(let t=this.sizeY-1;t>=0;t--)for(let s=0;s<this.sizeX;s++)e(`${s}-${t}`,s,t)}};const Z=async(e,t)=>{const s=e.length;for(let i=0;i<s;i++)await t(e[i],i,e)};var ee=e=>new Promise(t=>setTimeout(t,e));var te=class{constructor(e){this.delay=e,this.minDelay=20,this.maxDelay=100,this.prepareSpeedInput()}async run(e,t,s){s===y?await this.runDelayed(e,t):s===S&&this.runInstant(e,t)}async runDelayed(e,t){await Z(e,async e=>{const t=M.id(e.id);t.classList.remove(c),e.status===V?(t.classList.add(h),await ee(this.delay/5)):e.status===X&&(t.classList.add(u),await ee(this.delay/5))}),await Z(t,async e=>{M.id(e.id).classList.add(g),await ee(this.delay)})}runInstant(e,t){e.forEach(e=>{const t=M.id(e.id);t.classList.remove(c),e.status===V?t.classList.add("instant-"+h):e.status===X&&t.classList.add("instant-"+u)}),t.forEach(e=>{M.id(e.id).classList.add("instant-"+g)})}prepareSpeedInput(){const e=M.id(N);e.min=this.minDelay,e.max=this.maxDelay,e.value=this.delay,e.style.direction="rtl",e.addEventListener("change",e=>{this.delay=e.target.value})}};const se=(e,t,s,i)=>{let a=[];return t[`${s}-${i+1}`]&&t[`${s}-${i+1}`].status!==q&&a.push(`${s}-${i+1}`),t[`${s+1}-${i}`]&&t[`${s+1}-${i}`].status!==q&&a.push(`${s+1}-${i}`),t[`${s}-${i-1}`]&&t[`${s}-${i-1}`].status!==q&&a.push(`${s}-${i-1}`),t[`${s-1}-${i}`]&&t[`${s-1}-${i}`].status!==q&&a.push(`${s-1}-${i}`),a.filter(t=>e.find(e=>t===e))},ie=(e,t)=>{let s=1/0,i=0,a=0;return e.forEach((e,n)=>{t[e]&&t[e].dist<s&&(s=t[e].dist,i=e,a=n)}),e.splice(a,1),t[i]},ae=(e,t)=>{let s=1/0,i=0,a=0;return e.forEach((e,n)=>{if(t[e]&&t[e].dist!==1/0){const r=t[e].dist+t[e].heuristicDistance;r<s&&(s=r,i=e,a=n)}}),e.splice(a,1),t[i]},ne=(e,t)=>e.x===t.x&&e.y===t.y,re=(e,t,s,i)=>{let a=[];if(i){let i=!1,n=e[s.id];for(a.push(n);!i;){if(a.push(n),n.x===t.x&&n.y===t.y){i=!0;break}n.prevId&&(n=e[n.prevId])}}return a.reverse()},de={bfs:{name:"Breadth-First Search",func:(e,t,s)=>{let i=Object.keys(e),a={},n=[],r=!1;for(;i.length;){const t=ie(i,e);if(!t)break;if(t.status=V,a[t.id]=t,n.push(t),ne(t,s)){r=!0;break}se(i,e,t.x,t.y).forEach(s=>{a[s]=e[s],e[s].status=X,n.push(e[s]),t.dist<e[s].dist&&(e[s].dist=t.dist+1,e[s].prevId=t.id)})}return[n,re(a,t,s,r)]},node:{type:P,initialValues:{status:H,prevId:null,dist:1/0}}},dfs:{name:"Depth-First Search",func:(e,t,s)=>{let i=Object.keys(e),a={},n=[],r=!1;const d=(t,o)=>{if(!t)return;if(r)return;if(t.prevId=o,t.status=V,a[t.id]=t,n.push(t),i=i.filter(e=>e!==t.id),ne(t,s))return void(r=!0);se(i,e,t.x,t.y).forEach(s=>d(e[s],t.id))};return d(e[t.id]),[n,re(a,t,s,r)]},node:{type:P,initialValues:{status:H,prevId:null,dist:1/0}}},dijkstra:{name:"Dijkstra",func:async(e,t,s)=>{let i=Object.keys(e),a={},n=[],r=!1;for(;i.length;){const t=ie(i,e);if(!t)break;if(t.status=V,a[t.id]=t,n.push(t),ne(t,s)){r=!0;break}se(i,e,t.x,t.y).forEach(s=>{a[s]=e[s],e[s].status=X,n.push(e[s]);const i=O(t,e[s]);t.dist+i<e[s].dist&&(e[s].dist=t.dist+i,e[s].prevId=t.id,e[s].direction=j(t,e[s]))})}return[n,re(a,t,s,r)]},node:{type:F,initialValues:{status:H,prevId:null,dist:1/0,direction:null}}},astar:{name:"A* Search",func:(e,t,s)=>{let i=Object.keys(e),a={},n=[],r=!1;for(e[t.id].heuristicDistance=z(t,s);i.length;){const t=ae(i,e);if(!t)break;if(t.status=V,a[t.id]=t,n.push(t),ne(t,s)){r=!0;break}se(i,e,t.x,t.y).forEach(i=>{a[i]=e[i],e[i].status=X,n.push(e[i]);const r=O(t,e[i]);t.dist+r<e[i].dist&&(e[i].dist=t.dist+r,e[i].direction=j(t,e[i]),e[i].heuristicDistance=z(e[i],s),e[i].prevId=t.id)})}return[n,re(a,t,s,r)]},node:{type:U,initialValues:{status:H,prevId:null,dist:1/0,direction:null,heuristicDistance:null}}}};new class{constructor({boardId:e,blockSize:t,delay:s,algorithms:i,initialAlgorithm:a,initialStartDirection:n}){this.boardId=e,this.blockSize=t,this.width=null,this.height=null,this.nodeManager=null,this.startDirection=n,this.isSearching=!1,this.isPrepared=!1,this.isSearched=!1,this.isMakingWalls=!1,this.isNodeDragged=!1,this.draggedNodeId=null,this.isAlgorithmChanged=!1,this.algorithms=i||null,this.currentAlgorithm=a||null,this.visualizer=new te(s),this.animationType=y}initialize(){this.createNav(),this.calculateBoardSize(),this.createBoard(),this.initializeNodesManager(),this.nodesManager.createNodes(),this.nodesManager.setRandomStartNode(),this.nodesManager.setStartDirection(this.startDirection),this.nodesManager.setRandomEndNode(),w(this.nodesManager.startNode.id,this.startDirection),D(this.nodesManager.endNode.id),this.setInitialActiveNavAlgorithm(),this.addBlocksEventListeners(),this.addBtnsEventListeners(),I.addNavEventListeners(this.handleNavItemOnClick.bind(this)),this.isPrepared=!0}initializeNodesManager(){this.nodesManager=new Q(this.width,this.height,this.currentAlgorithm,this.initialStartDirection)}handleNavItemOnClick(e){const t=e.target;((e,...t)=>e.classList.contains(t))(t,n)||(M.all("."+a).forEach(e=>((e,...t)=>e.classList.remove(t))(e,r)),b(t,r),this.handleAlgorithmChange(t.dataset.algorithmKey))}calculateBoardSize(){const e=M.id(this.boardId),t=e.clientWidth,s=e.clientHeight;this.width=Math.floor(t/this.blockSize),this.height=Math.floor(s/this.blockSize)}createBoard(){const e=M.id(this.boardId),t=document.createElement("tbody");for(let e=this.height-1;e>=0;e--){const s=document.createElement("tr");for(let t=0;t<this.width;t++)E(s,this.blockSize,t,e);t.appendChild(s)}e.appendChild(t)}createNav(){const e=M.id(f);for(let[t,s]of Object.entries(this.algorithms)){const i=document.createElement("div");b(i,a),i.innerText=s.name,i.dataset.algorithmKey=t,e.appendChild(i)}}setInitialActiveNavAlgorithm(){document.querySelectorAll("."+a)[0].classList.add(r)}handleAlgorithmChange(e){this.setCurrentAlgorithm(e),this.isAlgorithmChanged=!0,this.nodesManager.currentAlgorithm=this.algorithms[e],this.nodesManager.recreateNodes()}addBtnsEventListeners(){const e=M.id(p),t=M.id(v),s=M.id(m);e.addEventListener("click",e=>this.handleDelayedStart()),t.addEventListener("click",e=>this.handleClear()),s.addEventListener("click",e=>this.handleClearWalls())}addBlocksEventListeners(){document.querySelectorAll("."+i).forEach(e=>{e.addEventListener("mousedown",t=>{t.preventDefault(),1!==t.which||this.isSearching||this.handleMouseDown(e)}),e.addEventListener("mouseenter",t=>{t.preventDefault(),this.isSearching||this.handleMouseEnter(e)}),e.addEventListener("mouseup",t=>{t.preventDefault(),this.isSearching||this.handleMouseUp(e)}),e.addEventListener("mouseleave",t=>{t.preventDefault(),this.isSearching||this.handleMouseLeave(e)})})}handleDelayedStart(){this.prepareDelayedSearchStateStart(),this.animationType=y,this.handleStart()}handleInstantStart(){this.prepareInstantSearchStateStart(),this.animationType=S,this.handleStart()}async handleStart(){if(this.isPrepared){this.handleSearchStateStart();const[e,t]=await this.currentAlgorithm.func(this.nodesManager.nodes,this.nodesManager.startNode,this.nodesManager.endNode);await this.visualizer.run(e,t,this.animationType),this.handleSearchStateEnd()}}handleClear(e){this.isSearching||(this.clearBoardAll(),this.nodesManager.resetNodesAll(),this.nodesManager.setRandomStartNode(),this.nodesManager.setRandomEndNode(),w(this.nodesManager.startNode.id,this.startDirection),D(this.nodesManager.endNode.id),this.isPrepared=!0,this.isSearched=!1,this.isSearching=!1)}handleClearWalls(){this.isSearching||(this.nodesManager.clearNodesFromWalls(),this.clearBoardFromWalls())}handleSearchStateStart(){this.isSearching=!0,this.isPrepared=!1,this.isSearched=!1,M.id(v).disabled=!0,M.id(m).disabled=!0,M.id(p).disabled=!0,document.querySelectorAll("."+a).forEach(e=>{e.classList.add(n)})}handleSearchStateEnd(){this.nodesManager.resetNodesExpectWalls(),this.nodesManager.retrieveStartNode(),this.nodesManager.retrieveEndNode(),this.isSearching=!1,this.isPrepared=!0,this.isSearched=!0,M.id(v).disabled=!1,M.id(m).disabled=!1,M.id(p).disabled=!1,document.querySelectorAll("."+a).forEach(e=>{e.classList.remove(n)})}prepareDelayedSearchStateStart(){this.clearBoardFromNodes(),w(this.nodesManager.startNode.id,this.startDirection),D(this.nodesManager.endNode.id),this.isPrepared=!0}prepareInstantSearchStateStart(){this.clearBoardFromNodes(),w(this.nodesManager.startNode.id,this.startDirection),D(this.nodesManager.endNode.id),this.isPrepared=!0}handleMouseDown(e){const t=e.id,s=!this.nodesManager.isNodeUnvisited(t)&&!this.nodesManager.isNodeWall(t)&&!this.isSearching,i=!this.isNodeDragged&&this.nodesManager.isNodeUnvisited(t);s?(this.draggedNodeId=t,this.isNodeDragged=!0):i&&(this.createWall(e),this.isMakingWalls=!0)}handleMouseEnter(e){const t=e.id;this.isNodeDragged&&this.nodesManager.isNodeUnvisited(t)?(this.nodesManager.isNodeStart(this.draggedNodeId)?(this.nodesManager.setStartNode(t),w(t,this.startDirection)):this.nodesManager.isNodeEnd(this.draggedNodeId)&&(this.nodesManager.setEndNode(t),D(t)),this.nodesManager.setNodeToInitial(this.draggedNodeId),this.draggedNodeId=t,this.isSearched&&this.handleInstantStart()):this.isMakingWalls&&this.nodesManager.isNodeUnvisited(t)&&this.createWall(e)}handleMouseUp(e){const t=e.id;this.isNodeDragged&&!this.nodesManager.isNodeWall(t)?(this.isNodeDragged=!1,this.draggedNodeId=null):this.isMakingWalls=!1}handleMouseLeave(){this.isNodeDragged&&x(this.draggedNodeId)}createWall(e){var t;this.nodesManager.setNodeToWall(e.id),t=e.id,M.id(t).className=`${i} ${l}`}setCurrentAlgorithm(e){this.currentAlgorithm=e?this.algorithms[e]:null}clearBoardAll(){this.loopBoard(e=>x(e))}clearBoardFromNodes(){this.loopBoard(e=>{M.id(e).classList.contains(l)||x(e)})}clearBoardFromWalls(){this.loopBoard(e=>{M.id(e).classList.contains(l)&&x(e)})}loopBoard(e){for(let t=this.height-1;t>=0;t--)for(let s=0;s<this.width;s++)e(`${s}-${t}`,s,t)}}({boardId:"board",blockSize:25,delay:20,algorithms:de,initialAlgorithm:de.bfs,initialStartDirection:"east"}).initialize()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,