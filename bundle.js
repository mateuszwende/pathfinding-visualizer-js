/*! For license information please see bundle.js.LICENSE.txt */
!function(e){var t={};function s(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(i,n,function(t){return e[t]}.bind(null,n));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s="./src/index.js")}({"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/resolve-url-loader/index.js!./node_modules/sass-loader/dist/cjs.js?!./src/assets/sass/main.scss":function(e,t,s){},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":function(e,t,s){"use strict";var i,n=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},r=function(){var e={};return function(t){if(void 0===e[t]){var s=document.querySelector(t);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(e){s=null}e[t]=s}return e[t]}}(),d=[];function o(e){for(var t=-1,s=0;s<d.length;s++)if(d[s].identifier===e){t=s;break}return t}function a(e,t){for(var s={},i=[],n=0;n<e.length;n++){var r=e[n],a=t.base?r[0]+t.base:r[0],l=s[a]||0,c="".concat(a," ").concat(l);s[a]=l+1;var u=o(c),h={css:r[1],media:r[2],sourceMap:r[3]};-1!==u?(d[u].references++,d[u].updater(h)):d.push({identifier:c,updater:p(h,t),references:1}),i.push(c)}return i}function l(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var n=s.nc;n&&(i.nonce=n)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var d=r(e.insert||"head");if(!d)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");d.appendChild(t)}return t}var c,u=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function h(e,t,s,i){var n=s?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,n);else{var r=document.createTextNode(n),d=e.childNodes;d[t]&&e.removeChild(d[t]),d.length?e.insertBefore(r,d[t]):e.appendChild(r)}}function m(e,t,s){var i=s.css,n=s.media,r=s.sourceMap;if(n?e.setAttribute("media",n):e.removeAttribute("media"),r&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var g=null,f=0;function p(e,t){var s,i,n;if(t.singleton){var r=f++;s=g||(g=l(t)),i=h.bind(null,s,r,!1),n=h.bind(null,s,r,!0)}else s=l(t),i=m.bind(null,s,t),n=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(s)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else n()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=n());var s=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<s.length;i++){var n=o(s[i]);d[n].references--}for(var r=a(e,t),l=0;l<s.length;l++){var c=o(s[l]);0===d[c].references&&(d[c].updater(),d.splice(c,1))}s=r}}}},"./src/assets/sass/main.scss":function(e,t,s){var i=s("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),n=s("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/resolve-url-loader/index.js!./node_modules/sass-loader/dist/cjs.js?!./src/assets/sass/main.scss");"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var r={insert:"head",singleton:!1},d=(i(n,r),n.locals?n.locals:{});e.exports=d},"./src/index.js":function(e,t,s){"use strict";s.r(t);s("./src/assets/sass/main.scss");var i=s("./src/modules/Board.js"),n=s("./src/modules/algorithms/dijkstra.js"),r=s("./src/modules/algorithms/breadthFirst.js");const d={dijkstra:{name:"Dijkstra",func:n.dijkstra},bfs:{name:"Breadth-First Search",func:r.breadthFirst}};new i.default("board",25,d).initialize()},"./src/modules/Board.js":function(e,t,s){"use strict";s.r(t);var i=s("./src/modules/helpers/block.js"),n=s("./src/modules/helpers/getRandomNum.js"),r=(s("./src/modules/algorithms/dijkstra.js"),s("./src/modules/algorithms/breadthFirst.js"),s("./src/modules/helpers/getDifferentRandomNum.js")),d=s("./src/modules/Node.js"),o=s("./src/modules/algorithms/helpers/weighted.js");t.default=class{constructor(e,t,s){this.boardId=e,this.blockSize=t,this.width=null,this.height=null,this.nodes={},this.startNode=null,this.endNode=null,this.isMakingWalls=!1,this.isNodeDragged=!1,this.draggedNodeClassList=null,this.algorithms=s,this.currentAlgorithm=null,this.speed=40,this.isSearching=!1,this.isPrepared=!1}initialize(){this.createNav(),this.calculateBoardSize(),this.createBoard(),this.setStartNode(),this.setEndNode(),this.setCurrentAlgorithm("dijkstra"),this.addNavAlgoElemsEventListeners(),this.addBlocksEventListeners(),this.addBtnsEventListeners(),console.log(this),this.isPrepared=!0}calculateBoardSize(){const e=document.getElementById(this.boardId),t=e.clientWidth,s=e.clientHeight;this.width=Math.floor(t/this.blockSize),this.height=Math.floor(s/this.blockSize)}createBoard(){const e=document.getElementById(this.boardId),t=document.createElement("tbody");for(let e=this.height-1;e>=0;e--){const s=document.createElement("tr");for(let t=0;t<this.width;t++){Object(i.createBlock)(s,this.blockSize,t,e);const n=new d.default("block",t,e,1/0,null,null);this.nodes[n.id]=n}t.appendChild(s)}e.appendChild(t)}createNav(){const e=document.getElementById("nav");for(let[t,s]of Object.entries(this.algorithms)){const i=document.createElement("div");i.classList.add("nav-algorithm-js"),i.innerText=s.name,i.dataset.algorithmKey=t,e.appendChild(i)}}setCurrentAlgorithm(e){this.currentAlgorithm=this.algorithms[e].func,document.querySelectorAll(".nav-algorithm-js")[0].classList.add("active")}setStartNode(){const e=Object(n.getRandomNum)(0,this.width-1),t=Object(n.getRandomNum)(0,this.height-1);this.nodes[`${e}-${t}`].update({status:"start",dist:0,direction:o.directions.east}),this.startNode=this.nodes[`${e}-${t}`],document.getElementById(this.startNode.id).classList.add("start","east")}setEndNode(){const e=Object(r.getDifferentRandomNum)(0,this.width-1,this.startNode.x),t=Object(r.getDifferentRandomNum)(0,this.height-1,this.startNode.y);this.nodes[`${e}-${t}`].status="end",this.nodes[`${e}-${t}`].update({status:"end"}),this.endNode=this.nodes[`${e}-${t}`],document.getElementById(this.endNode.id).classList.add("end")}addNavAlgoElemsEventListeners(){const e=document.querySelectorAll(".nav-algorithm-js");e.forEach(t=>{t.addEventListener("click",t=>{t.target.classList.contains("blocked")||(e.forEach(e=>e.classList.remove("active")),t.target.classList.add("active"),this.currentAlgorithm=this.algorithms[t.target.dataset.algorithmKey].func)})})}addBtnsEventListeners(){const e=document.getElementById("startBtn"),t=document.getElementById("clearBtn");e.addEventListener("click",async e=>{this.isPrepared&&(this.handleIsSearchingState(!0),this.handleIsPreparedState(!1),await this.currentAlgorithm(this.nodes,this.startNode,this.endNode,this.speed),this.handleIsSearchingState(!1))}),t.addEventListener("click",e=>{this.isSearching||(this.clearBoard(),this.handleIsPreparedState(!0))})}addBlocksEventListeners(){document.querySelectorAll(".unvisited").forEach(e=>{e.addEventListener("mousedown",t=>{t.preventDefault(),this.handleMouseDown(e)}),e.addEventListener("mouseenter",t=>{t.preventDefault(),this.handleMouseEnter(e)}),e.addEventListener("mouseup",t=>{t.preventDefault(),this.handleMouseUp(e)}),e.addEventListener("mouseleave",t=>{t.preventDefault(),this.handleMouseLeave(e)})})}handleMouseDown(e){const t=e.id;"start"===this.nodes[t].status||"end"===this.nodes[t].status?(this.draggedNodeId=t,this.isNodeDragged=!0):this.isNodeDragged||(this.createWall(e),this.setMakingWallsState(!0))}handleMouseEnter(e){if(this.isNodeDragged){const t=this.nodes[this.draggedNodeId];if("start"!==t.status||e.classList.contains("end"))"end"!==t.status||e.classList.contains("start")||e.classList.add("end");else{const s=Object(o.getDirectionName)(t.direction);e.classList.add("start",s)}}else this.isMakingWalls&&this.createWall(e)}handleMouseUp(e){const t=e.id;this.isNodeDragged&&t!==this.draggedNodeId?("start"===this.nodes[this.draggedNodeId].status?(this.nodes[t].update({status:"start",dist:0,direction:o.directions.east}),this.startNode=this.nodes[t]):"end"===this.nodes[this.draggedNodeId].status&&(this.nodes[t].update({status:"end",dist:1/0,direction:null}),this.endNode=this.nodes[t]),this.nodes[this.draggedNodeId].update({status:"block",dist:1/0,direction:null}),this.isNodeDragged=!1,this.draggedNodeId=null):this.setMakingWallsState(!1)}handleMouseLeave(e){if(this.isNodeDragged){const t=this.nodes[this.draggedNodeId];if("start"===t.status){const s=Object(o.getDirectionName)(t.direction);e.classList.remove("start",s)}else"end"===t.status&&e.classList.remove("end")}}createWall(e){window.requestAnimationFrame(()=>e.classList.add("wall"))}blockHasWall(e){return e.classList.contains("wall")}setMakingWallsState(e){this.isMakingWalls=e}handleIsSearchingState(e){this.isSearching=e,document.getElementById("clearBtn").disabled=e}handleIsPreparedState(e){this.isPrepared=e,document.getElementById("startBtn").disabled=!e}clearBoard(){for(let e=this.height-1;e>=0;e--)for(let t=0;t<this.width;t++)this.nodes[`${t}-${e}`].update({status:"block",dist:1/0,prevId:null,direction:null}),document.getElementById(`${t}-${e}`).classList=[],document.getElementById(`${t}-${e}`).classList.add("unvisited");this.setStartNode(),this.setEndNode()}}},"./src/modules/Node.js":function(e,t,s){"use strict";s.r(t);t.default=class{constructor(e,t,s,i,n,r){this.status=e,this.id=`${t}-${s}`,this.x=t,this.y=s,this.dist=i,this.prevId=n,this.direction=r,this.update=this.update.bind(this)}update(e){for(let t of Object.keys(this))for(let s of Object.keys(e))t===s&&(this[t]=e[s])}}},"./src/modules/algorithms/breadthFirst.js":function(e,t,s){"use strict";s.r(t),s.d(t,"breadthFirst",(function(){return o}));var i=s("./src/modules/helpers/asyncDelay.js"),n=s("./src/modules/algorithms/helpers/neighbors.js"),r=s("./src/modules/helpers/visualizePath.js"),d=s("./src/modules/algorithms/helpers/nodes.js");const o=async(e,t,s,o)=>{let a=Object.keys(e),l={},c=!1;for(;a.length;){const t=Object(d.getClosestNode)(a,e);if(document.getElementById(t.id).classList.add("visited"),await Object(i.default)(o),!t)break;if(l[t.id]=t,h=s,(u=t).x===h.x&&u.y===h.y){c=!0;break}Object(n.getNeighborsIds)(e,t.x,t.y).forEach(s=>{t.dist<e[s].dist&&(e[s].dist=t.dist+1,e[s].prevId=t.id),document.getElementById(e[s].id).classList.replace("unvisited","neighbor")})}var u,h;c&&Object(r.visualizePath)(l,t,s,o)}},"./src/modules/algorithms/dijkstra.js":function(e,t,s){"use strict";s.r(t),s.d(t,"dijkstra",(function(){return a}));var i=s("./src/modules/helpers/asyncDelay.js"),n=s("./src/modules/algorithms/helpers/weighted.js"),r=s("./src/modules/algorithms/helpers/neighbors.js"),d=s("./src/modules/helpers/visualizePath.js"),o=s("./src/modules/algorithms/helpers/nodes.js");const a=async(e,t,s,a)=>{let l=Object.keys(e),c={},u=!1;for(;l.length;){const t=Object(o.getClosestNode)(l,e);if(document.getElementById(t.id).classList.add("visited"),await Object(i.default)(a),!t)break;if(c[t.id]=t,m=s,(h=t).x===m.x&&h.y===m.y){u=!0;break}Object(r.getNeighborsIds)(e,t.x,t.y).forEach(s=>{const i=Object(n.getDistanceBetweenNodes)(t,e[s]);document.getElementById(e[s].id).classList.replace("unvisited","neighbor"),t.dist+i<e[s].dist&&(e[s].dist=t.dist+i,e[s].prevId=t.id,e[s].direction=Object(n.getNodeDirection)(t,e[s]))})}var h,m;u&&Object(d.visualizePath)(c,t,s,a)}},"./src/modules/algorithms/helpers/neighbors.js":function(e,t,s){"use strict";s.r(t),s.d(t,"getNeighborsIds",(function(){return i}));const i=(e,t,s)=>{let i=[];return e[`${t}-${s+1}`]&&!document.getElementById(`${t}-${s+1}`).classList.contains("wall")&&i.push(`${t}-${s+1}`),e[`${t+1}-${s}`]&&!document.getElementById(`${t+1}-${s}`).classList.contains("wall")&&i.push(`${t+1}-${s}`),e[`${t}-${s-1}`]&&!document.getElementById(`${t}-${s-1}`).classList.contains("wall")&&i.push(`${t}-${s-1}`),e[`${t-1}-${s}`]&&!document.getElementById(`${t-1}-${s}`).classList.contains("wall")&&i.push(`${t-1}-${s}`),i}},"./src/modules/algorithms/helpers/nodes.js":function(e,t,s){"use strict";s.r(t),s.d(t,"getClosestNode",(function(){return i}));const i=(e,t)=>{let s=1/0,i=0,n=0;return e.forEach((e,r)=>{t[e]&&t[e].dist<s&&(s=t[e].dist,i=e,n=r)}),e.splice(n,1),t[i]}},"./src/modules/algorithms/helpers/weighted.js":function(e,t,s){"use strict";s.r(t),s.d(t,"directions",(function(){return i})),s.d(t,"getDirectionName",(function(){return r})),s.d(t,"northDirectionWeights",(function(){return d})),s.d(t,"eastDirectionWeights",(function(){return o})),s.d(t,"southDirectionWeights",(function(){return a})),s.d(t,"westDirectionWeights",(function(){return l})),s.d(t,"moveWeight",(function(){return c})),s.d(t,"getDistanceBetweenNodes",(function(){return u})),s.d(t,"getNodeDirection",(function(){return h}));const i={north:0,east:1,south:2,west:3},n=["north","east","south","west"],r=e=>n[e],d=[0,1,2,1],o=[1,0,1,2],a=[2,1,0,1],l=[1,2,1,0],c=1,u=(e,t)=>{if(e.y<t.y&&e.x===t.x)return d[e.direction]+c;if(e.x<t.x&&e.y===t.y)return o[e.direction]+c;if(e.y>t.y&&e.x===t.x)return a[e.direction]+c;if(e.x>t.x&&e.y===t.y)return l[e.direction]+c;throw new Error("Something went wrong when setting the distance between nodes.")},h=(e,t)=>{if(e.y<t.y&&e.x===t.x)return i.north;if(e.x<t.x&&e.y===t.y)return i.east;if(e.y>t.y&&e.x===t.x)return i.south;if(e.x>t.x&&e.y===t.y)return i.west;throw new Error("Something went wrong when setting the direction of node.")}},"./src/modules/helpers/asyncDelay.js":function(e,t,s){"use strict";s.r(t),t.default=e=>new Promise(t=>setTimeout(t,e))},"./src/modules/helpers/block.js":function(e,t,s){"use strict";s.r(t),s.d(t,"createBlock",(function(){return i}));const i=(e,t,s,i)=>{const n=document.createElement("td");n.id=`${s}-${i}`,n.classList.add("unvisited"),n.style.width=t+"px",n.style.height=t+"px",n.dataset.x=s,n.dataset.y=i,e.appendChild(n)}},"./src/modules/helpers/getDifferentRandomNum.js":function(e,t,s){"use strict";s.r(t),s.d(t,"getDifferentRandomNum",(function(){return n}));var i=s("./src/modules/helpers/getRandomNum.js");const n=(e,t,s)=>{let n;do{n=Object(i.getRandomNum)(e,t)}while(n===s);return n}},"./src/modules/helpers/getRandomNum.js":function(e,t,s){"use strict";s.r(t),s.d(t,"getRandomNum",(function(){return i}));const i=(e,t)=>Math.floor(Math.random()*t)+e},"./src/modules/helpers/visualizePath.js":function(e,t,s){"use strict";s.r(t),s.d(t,"visualizePath",(function(){return n}));var i=s("./src/modules/helpers/asyncDelay.js");const n=async(e,t,s,n)=>{let r=[],d=!1,o=e[`${s.x}-${s.y}`];for(r.push(o.id);!d;){if(o.x===t.x&&o.y===t.y){d=!0;break}r.push(o.prevId),o=e[o.prevId]}for(let e=r.length-1;e>=0;e--)document.getElementById(r[e]).classList.add("path"),await Object(i.default)(n+100)}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,